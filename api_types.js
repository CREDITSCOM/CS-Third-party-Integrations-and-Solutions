//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var variant_ttypes = require('./variant_types');


var ttypes = module.exports = {};
ttypes.TokenStandart = {
  'NotAToken' : 0,
  'CreditsBasic' : 1,
  'CreditsExtended' : 2
};
ttypes.TokensListSortField = {
  'TL_Code' : 0,
  'TL_Name' : 1,
  'TL_Address' : 2,
  'TL_TotalSupply' : 3,
  'TL_HoldersCount' : 4,
  'TL_TransfersCount' : 5,
  'TL_TransactionsCount' : 6
};
ttypes.TokenHoldersSortField = {
  'TH_Balance' : 0,
  'TH_TransfersCount' : 1
};
var Amount = module.exports.Amount = function(args) {
  this.integral = 0;
  this.fraction = 0;
  if (args) {
    if (args.integral !== undefined && args.integral !== null) {
      this.integral = args.integral;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field integral is unset!');
    }
    if (args.fraction !== undefined && args.fraction !== null) {
      this.fraction = args.fraction;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fraction is unset!');
    }
  }
};
Amount.prototype = {};
Amount.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.integral = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.fraction = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Amount.prototype.write = function(output) {
  output.writeStructBegin('Amount');
  if (this.integral !== null && this.integral !== undefined) {
    output.writeFieldBegin('integral', Thrift.Type.I32, 1);
    output.writeI32(this.integral);
    output.writeFieldEnd();
  }
  if (this.fraction !== null && this.fraction !== undefined) {
    output.writeFieldBegin('fraction', Thrift.Type.I64, 2);
    output.writeI64(this.fraction);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CumulativeAmount = module.exports.CumulativeAmount = function(args) {
  this.integral = 0;
  this.fraction = 0;
  if (args) {
    if (args.integral !== undefined && args.integral !== null) {
      this.integral = args.integral;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field integral is unset!');
    }
    if (args.fraction !== undefined && args.fraction !== null) {
      this.fraction = args.fraction;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fraction is unset!');
    }
  }
};
CumulativeAmount.prototype = {};
CumulativeAmount.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.integral = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.fraction = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CumulativeAmount.prototype.write = function(output) {
  output.writeStructBegin('CumulativeAmount');
  if (this.integral !== null && this.integral !== undefined) {
    output.writeFieldBegin('integral', Thrift.Type.I64, 1);
    output.writeI64(this.integral);
    output.writeFieldEnd();
  }
  if (this.fraction !== null && this.fraction !== undefined) {
    output.writeFieldBegin('fraction', Thrift.Type.I64, 2);
    output.writeI64(this.fraction);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartContract = module.exports.SmartContract = function(args) {
  this.address = null;
  this.deployer = null;
  this.sourceCode = null;
  this.byteCode = null;
  this.hashState = null;
  this.tokenStandart = null;
  this.createTime = null;
  this.transactionsCount = null;
  if (args) {
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field address is unset!');
    }
    if (args.deployer !== undefined && args.deployer !== null) {
      this.deployer = args.deployer;
    }
    if (args.sourceCode !== undefined && args.sourceCode !== null) {
      this.sourceCode = args.sourceCode;
    }
    if (args.byteCode !== undefined && args.byteCode !== null) {
      this.byteCode = args.byteCode;
    }
    if (args.hashState !== undefined && args.hashState !== null) {
      this.hashState = args.hashState;
    }
    if (args.tokenStandart !== undefined && args.tokenStandart !== null) {
      this.tokenStandart = args.tokenStandart;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.transactionsCount !== undefined && args.transactionsCount !== null) {
      this.transactionsCount = args.transactionsCount;
    }
  }
};
SmartContract.prototype = {};
SmartContract.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.deployer = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sourceCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.byteCode = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.hashState = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.tokenStandart = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.createTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.transactionsCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartContract.prototype.write = function(output) {
  output.writeStructBegin('SmartContract');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  if (this.deployer !== null && this.deployer !== undefined) {
    output.writeFieldBegin('deployer', Thrift.Type.STRING, 2);
    output.writeBinary(this.deployer);
    output.writeFieldEnd();
  }
  if (this.sourceCode !== null && this.sourceCode !== undefined) {
    output.writeFieldBegin('sourceCode', Thrift.Type.STRING, 3);
    output.writeString(this.sourceCode);
    output.writeFieldEnd();
  }
  if (this.byteCode !== null && this.byteCode !== undefined) {
    output.writeFieldBegin('byteCode', Thrift.Type.STRING, 4);
    output.writeBinary(this.byteCode);
    output.writeFieldEnd();
  }
  if (this.hashState !== null && this.hashState !== undefined) {
    output.writeFieldBegin('hashState', Thrift.Type.STRING, 5);
    output.writeString(this.hashState);
    output.writeFieldEnd();
  }
  if (this.tokenStandart !== null && this.tokenStandart !== undefined) {
    output.writeFieldBegin('tokenStandart', Thrift.Type.I32, 6);
    output.writeI32(this.tokenStandart);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I64, 7);
    output.writeI64(this.createTime);
    output.writeFieldEnd();
  }
  if (this.transactionsCount !== null && this.transactionsCount !== undefined) {
    output.writeFieldBegin('transactionsCount', Thrift.Type.I32, 8);
    output.writeI32(this.transactionsCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartContractInvocation = module.exports.SmartContractInvocation = function(args) {
  this.sourceCode = null;
  this.byteCode = null;
  this.hashState = null;
  this.method = null;
  this.params = null;
  this.forgetNewState = null;
  if (args) {
    if (args.sourceCode !== undefined && args.sourceCode !== null) {
      this.sourceCode = args.sourceCode;
    }
    if (args.byteCode !== undefined && args.byteCode !== null) {
      this.byteCode = args.byteCode;
    }
    if (args.hashState !== undefined && args.hashState !== null) {
      this.hashState = args.hashState;
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = Thrift.copyList(args.params, [null]);
    }
    if (args.forgetNewState !== undefined && args.forgetNewState !== null) {
      this.forgetNewState = args.forgetNewState;
    }
  }
};
SmartContractInvocation.prototype = {};
SmartContractInvocation.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sourceCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.byteCode = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.hashState = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.method = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.params = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = input.readString();
          this.params.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.forgetNewState = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartContractInvocation.prototype.write = function(output) {
  output.writeStructBegin('SmartContractInvocation');
  if (this.sourceCode !== null && this.sourceCode !== undefined) {
    output.writeFieldBegin('sourceCode', Thrift.Type.STRING, 1);
    output.writeString(this.sourceCode);
    output.writeFieldEnd();
  }
  if (this.byteCode !== null && this.byteCode !== undefined) {
    output.writeFieldBegin('byteCode', Thrift.Type.STRING, 2);
    output.writeBinary(this.byteCode);
    output.writeFieldEnd();
  }
  if (this.hashState !== null && this.hashState !== undefined) {
    output.writeFieldBegin('hashState', Thrift.Type.STRING, 3);
    output.writeString(this.hashState);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.STRING, 4);
    output.writeString(this.method);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.params.length);
    for (var iter4 in this.params) {
      if (this.params.hasOwnProperty(iter4)) {
        iter4 = this.params[iter4];
        output.writeString(iter4);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.forgetNewState !== null && this.forgetNewState !== undefined) {
    output.writeFieldBegin('forgetNewState', Thrift.Type.BOOL, 6);
    output.writeBool(this.forgetNewState);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TransactionId = module.exports.TransactionId = function(args) {
  this.poolHash = null;
  this.index = null;
  if (args) {
    if (args.poolHash !== undefined && args.poolHash !== null) {
      this.poolHash = args.poolHash;
    }
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
  }
};
TransactionId.prototype = {};
TransactionId.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.poolHash = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.index = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransactionId.prototype.write = function(output) {
  output.writeStructBegin('TransactionId');
  if (this.poolHash !== null && this.poolHash !== undefined) {
    output.writeFieldBegin('poolHash', Thrift.Type.STRING, 1);
    output.writeBinary(this.poolHash);
    output.writeFieldEnd();
  }
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I32, 2);
    output.writeI32(this.index);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Transaction = module.exports.Transaction = function(args) {
  this.id = null;
  this.source = null;
  this.target = null;
  this.amount = null;
  this.balance = null;
  this.currency = null;
  this.signature = null;
  this.smartContract = null;
  this.fee = null;
  this.time = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.target !== undefined && args.target !== null) {
      this.target = args.target;
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = new ttypes.Amount(args.amount);
    }
    if (args.balance !== undefined && args.balance !== null) {
      this.balance = new ttypes.Amount(args.balance);
    }
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = args.currency;
    }
    if (args.signature !== undefined && args.signature !== null) {
      this.signature = args.signature;
    }
    if (args.smartContract !== undefined && args.smartContract !== null) {
      this.smartContract = new ttypes.SmartContractInvocation(args.smartContract);
    }
    if (args.fee !== undefined && args.fee !== null) {
      this.fee = new ttypes.Amount(args.fee);
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    }
  }
};
Transaction.prototype = {};
Transaction.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.target = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.amount = new ttypes.Amount();
        this.amount.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.balance = new ttypes.Amount();
        this.balance.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BYTE) {
        this.currency = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.signature = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.smartContract = new ttypes.SmartContractInvocation();
        this.smartContract.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.fee = new ttypes.Amount();
        this.fee.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Transaction.prototype.write = function(output) {
  output.writeStructBegin('Transaction');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 2);
    output.writeBinary(this.source);
    output.writeFieldEnd();
  }
  if (this.target !== null && this.target !== undefined) {
    output.writeFieldBegin('target', Thrift.Type.STRING, 3);
    output.writeBinary(this.target);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.STRUCT, 4);
    this.amount.write(output);
    output.writeFieldEnd();
  }
  if (this.balance !== null && this.balance !== undefined) {
    output.writeFieldBegin('balance', Thrift.Type.STRUCT, 5);
    this.balance.write(output);
    output.writeFieldEnd();
  }
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.BYTE, 6);
    output.writeByte(this.currency);
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.STRING, 7);
    output.writeBinary(this.signature);
    output.writeFieldEnd();
  }
  if (this.smartContract !== null && this.smartContract !== undefined) {
    output.writeFieldBegin('smartContract', Thrift.Type.STRUCT, 8);
    this.smartContract.write(output);
    output.writeFieldEnd();
  }
  if (this.fee !== null && this.fee !== undefined) {
    output.writeFieldBegin('fee', Thrift.Type.STRUCT, 9);
    this.fee.write(output);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 10);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SealedTransaction = module.exports.SealedTransaction = function(args) {
  this.id = null;
  this.trxn = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = new ttypes.TransactionId(args.id);
    }
    if (args.trxn !== undefined && args.trxn !== null) {
      this.trxn = new ttypes.Transaction(args.trxn);
    }
  }
};
SealedTransaction.prototype = {};
SealedTransaction.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.id = new ttypes.TransactionId();
        this.id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.trxn = new ttypes.Transaction();
        this.trxn.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SealedTransaction.prototype.write = function(output) {
  output.writeStructBegin('SealedTransaction');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRUCT, 1);
    this.id.write(output);
    output.writeFieldEnd();
  }
  if (this.trxn !== null && this.trxn !== undefined) {
    output.writeFieldBegin('trxn', Thrift.Type.STRUCT, 2);
    this.trxn.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Pool = module.exports.Pool = function(args) {
  this.hash = null;
  this.prevHash = null;
  this.time = null;
  this.transactionsCount = null;
  this.poolNumber = null;
  this.writer = null;
  this.totalFee = null;
  if (args) {
    if (args.hash !== undefined && args.hash !== null) {
      this.hash = args.hash;
    }
    if (args.prevHash !== undefined && args.prevHash !== null) {
      this.prevHash = args.prevHash;
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    }
    if (args.transactionsCount !== undefined && args.transactionsCount !== null) {
      this.transactionsCount = args.transactionsCount;
    }
    if (args.poolNumber !== undefined && args.poolNumber !== null) {
      this.poolNumber = args.poolNumber;
    }
    if (args.writer !== undefined && args.writer !== null) {
      this.writer = args.writer;
    }
    if (args.totalFee !== undefined && args.totalFee !== null) {
      this.totalFee = new ttypes.Amount(args.totalFee);
    }
  }
};
Pool.prototype = {};
Pool.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hash = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.prevHash = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.transactionsCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.poolNumber = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.writer = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.totalFee = new ttypes.Amount();
        this.totalFee.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Pool.prototype.write = function(output) {
  output.writeStructBegin('Pool');
  if (this.hash !== null && this.hash !== undefined) {
    output.writeFieldBegin('hash', Thrift.Type.STRING, 1);
    output.writeBinary(this.hash);
    output.writeFieldEnd();
  }
  if (this.prevHash !== null && this.prevHash !== undefined) {
    output.writeFieldBegin('prevHash', Thrift.Type.STRING, 2);
    output.writeBinary(this.prevHash);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 3);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  if (this.transactionsCount !== null && this.transactionsCount !== undefined) {
    output.writeFieldBegin('transactionsCount', Thrift.Type.I32, 4);
    output.writeI32(this.transactionsCount);
    output.writeFieldEnd();
  }
  if (this.poolNumber !== null && this.poolNumber !== undefined) {
    output.writeFieldBegin('poolNumber', Thrift.Type.I64, 5);
    output.writeI64(this.poolNumber);
    output.writeFieldEnd();
  }
  if (this.writer !== null && this.writer !== undefined) {
    output.writeFieldBegin('writer', Thrift.Type.STRING, 6);
    output.writeBinary(this.writer);
    output.writeFieldEnd();
  }
  if (this.totalFee !== null && this.totalFee !== undefined) {
    output.writeFieldBegin('totalFee', Thrift.Type.STRUCT, 7);
    this.totalFee.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PeriodStats = module.exports.PeriodStats = function(args) {
  this.periodDuration = null;
  this.poolsCount = null;
  this.transactionsCount = null;
  this.balancePerCurrency = null;
  this.smartContractsCount = null;
  this.transactionsSmartCount = null;
  if (args) {
    if (args.periodDuration !== undefined && args.periodDuration !== null) {
      this.periodDuration = args.periodDuration;
    }
    if (args.poolsCount !== undefined && args.poolsCount !== null) {
      this.poolsCount = args.poolsCount;
    }
    if (args.transactionsCount !== undefined && args.transactionsCount !== null) {
      this.transactionsCount = args.transactionsCount;
    }
    if (args.balancePerCurrency !== undefined && args.balancePerCurrency !== null) {
      this.balancePerCurrency = Thrift.copyMap(args.balancePerCurrency, [ttypes.CumulativeAmount]);
    }
    if (args.smartContractsCount !== undefined && args.smartContractsCount !== null) {
      this.smartContractsCount = args.smartContractsCount;
    }
    if (args.transactionsSmartCount !== undefined && args.transactionsSmartCount !== null) {
      this.transactionsSmartCount = args.transactionsSmartCount;
    }
  }
};
PeriodStats.prototype = {};
PeriodStats.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.periodDuration = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.poolsCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.transactionsCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.balancePerCurrency = {};
        var _rtmp36 = input.readMapBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var key8 = null;
          var val9 = null;
          key8 = input.readByte();
          val9 = new ttypes.CumulativeAmount();
          val9.read(input);
          this.balancePerCurrency[key8] = val9;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.smartContractsCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.transactionsSmartCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PeriodStats.prototype.write = function(output) {
  output.writeStructBegin('PeriodStats');
  if (this.periodDuration !== null && this.periodDuration !== undefined) {
    output.writeFieldBegin('periodDuration', Thrift.Type.I64, 1);
    output.writeI64(this.periodDuration);
    output.writeFieldEnd();
  }
  if (this.poolsCount !== null && this.poolsCount !== undefined) {
    output.writeFieldBegin('poolsCount', Thrift.Type.I32, 2);
    output.writeI32(this.poolsCount);
    output.writeFieldEnd();
  }
  if (this.transactionsCount !== null && this.transactionsCount !== undefined) {
    output.writeFieldBegin('transactionsCount', Thrift.Type.I32, 3);
    output.writeI32(this.transactionsCount);
    output.writeFieldEnd();
  }
  if (this.balancePerCurrency !== null && this.balancePerCurrency !== undefined) {
    output.writeFieldBegin('balancePerCurrency', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.BYTE, Thrift.Type.STRUCT, Thrift.objectLength(this.balancePerCurrency));
    for (var kiter10 in this.balancePerCurrency) {
      if (this.balancePerCurrency.hasOwnProperty(kiter10)) {
        var viter11 = this.balancePerCurrency[kiter10];
        output.writeByte(kiter10);
        viter11.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.smartContractsCount !== null && this.smartContractsCount !== undefined) {
    output.writeFieldBegin('smartContractsCount', Thrift.Type.I32, 5);
    output.writeI32(this.smartContractsCount);
    output.writeFieldEnd();
  }
  if (this.transactionsSmartCount !== null && this.transactionsSmartCount !== undefined) {
    output.writeFieldBegin('transactionsSmartCount', Thrift.Type.I32, 6);
    output.writeI32(this.transactionsSmartCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var APIResponse = module.exports.APIResponse = function(args) {
  this.code = null;
  this.message = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
APIResponse.prototype = {};
APIResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.code = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIResponse.prototype.write = function(output) {
  output.writeStructBegin('APIResponse');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.BYTE, 1);
    output.writeByte(this.code);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BalanceGetResult = module.exports.BalanceGetResult = function(args) {
  this.status = null;
  this.amount = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.APIResponse(args.status);
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = new ttypes.Amount(args.amount);
    }
  }
};
BalanceGetResult.prototype = {};
BalanceGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.amount = new ttypes.Amount();
        this.amount.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BalanceGetResult.prototype.write = function(output) {
  output.writeStructBegin('BalanceGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.STRUCT, 2);
    this.amount.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TransactionGetResult = module.exports.TransactionGetResult = function(args) {
  this.status = null;
  this.found = null;
  this.transaction = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.APIResponse(args.status);
    }
    if (args.found !== undefined && args.found !== null) {
      this.found = args.found;
    }
    if (args.transaction !== undefined && args.transaction !== null) {
      this.transaction = new ttypes.SealedTransaction(args.transaction);
    }
  }
};
TransactionGetResult.prototype = {};
TransactionGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.found = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.transaction = new ttypes.SealedTransaction();
        this.transaction.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransactionGetResult.prototype.write = function(output) {
  output.writeStructBegin('TransactionGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.found !== null && this.found !== undefined) {
    output.writeFieldBegin('found', Thrift.Type.BOOL, 2);
    output.writeBool(this.found);
    output.writeFieldEnd();
  }
  if (this.transaction !== null && this.transaction !== undefined) {
    output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
    this.transaction.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TransactionsGetResult = module.exports.TransactionsGetResult = function(args) {
  this.status = null;
  this.result = null;
  this.count = null;
  this.transactions = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.APIResponse(args.status);
    }
    if (args.result !== undefined && args.result !== null) {
      this.result = args.result;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.transactions !== undefined && args.transactions !== null) {
      this.transactions = Thrift.copyList(args.transactions, [ttypes.SealedTransaction]);
    }
  }
};
TransactionsGetResult.prototype = {};
TransactionsGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.result = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.transactions = [];
        var _rtmp313 = input.readListBegin();
        var _size12 = _rtmp313.size || 0;
        for (var _i14 = 0; _i14 < _size12; ++_i14) {
          var elem15 = null;
          elem15 = new ttypes.SealedTransaction();
          elem15.read(input);
          this.transactions.push(elem15);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransactionsGetResult.prototype.write = function(output) {
  output.writeStructBegin('TransactionsGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.BOOL, 2);
    output.writeBool(this.result);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.transactions !== null && this.transactions !== undefined) {
    output.writeFieldBegin('transactions', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.transactions.length);
    for (var iter16 in this.transactions) {
      if (this.transactions.hasOwnProperty(iter16)) {
        iter16 = this.transactions[iter16];
        iter16.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TransactionFlowResult = module.exports.TransactionFlowResult = function(args) {
  this.status = null;
  this.smart_contract_result = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.APIResponse(args.status);
    }
    if (args.smart_contract_result !== undefined && args.smart_contract_result !== null) {
      this.smart_contract_result = new variant_ttypes.Variant(args.smart_contract_result);
    }
  }
};
TransactionFlowResult.prototype = {};
TransactionFlowResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.smart_contract_result = new variant_ttypes.Variant();
        this.smart_contract_result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransactionFlowResult.prototype.write = function(output) {
  output.writeStructBegin('TransactionFlowResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.smart_contract_result !== null && this.smart_contract_result !== undefined) {
    output.writeFieldBegin('smart_contract_result', Thrift.Type.STRUCT, 2);
    this.smart_contract_result.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PoolListGetResult = module.exports.PoolListGetResult = function(args) {
  this.status = null;
  this.result = null;
  this.count = null;
  this.pools = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.APIResponse(args.status);
    }
    if (args.result !== undefined && args.result !== null) {
      this.result = args.result;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.pools !== undefined && args.pools !== null) {
      this.pools = Thrift.copyList(args.pools, [ttypes.Pool]);
    }
  }
};
PoolListGetResult.prototype = {};
PoolListGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.result = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.pools = [];
        var _rtmp318 = input.readListBegin();
        var _size17 = _rtmp318.size || 0;
        for (var _i19 = 0; _i19 < _size17; ++_i19) {
          var elem20 = null;
          elem20 = new ttypes.Pool();
          elem20.read(input);
          this.pools.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PoolListGetResult.prototype.write = function(output) {
  output.writeStructBegin('PoolListGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.BOOL, 2);
    output.writeBool(this.result);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.pools !== null && this.pools !== undefined) {
    output.writeFieldBegin('pools', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.pools.length);
    for (var iter21 in this.pools) {
      if (this.pools.hasOwnProperty(iter21)) {
        iter21 = this.pools[iter21];
        iter21.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PoolInfoGetResult = module.exports.PoolInfoGetResult = function(args) {
  this.status = null;
  this.isFound = null;
  this.pool = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.APIResponse(args.status);
    }
    if (args.isFound !== undefined && args.isFound !== null) {
      this.isFound = args.isFound;
    }
    if (args.pool !== undefined && args.pool !== null) {
      this.pool = new ttypes.Pool(args.pool);
    }
  }
};
PoolInfoGetResult.prototype = {};
PoolInfoGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isFound = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pool = new ttypes.Pool();
        this.pool.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PoolInfoGetResult.prototype.write = function(output) {
  output.writeStructBegin('PoolInfoGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.isFound !== null && this.isFound !== undefined) {
    output.writeFieldBegin('isFound', Thrift.Type.BOOL, 2);
    output.writeBool(this.isFound);
    output.writeFieldEnd();
  }
  if (this.pool !== null && this.pool !== undefined) {
    output.writeFieldBegin('pool', Thrift.Type.STRUCT, 3);
    this.pool.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PoolTransactionsGetResult = module.exports.PoolTransactionsGetResult = function(args) {
  this.status = null;
  this.transactions = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.APIResponse(args.status);
    }
    if (args.transactions !== undefined && args.transactions !== null) {
      this.transactions = Thrift.copyList(args.transactions, [ttypes.SealedTransaction]);
    }
  }
};
PoolTransactionsGetResult.prototype = {};
PoolTransactionsGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.transactions = [];
        var _rtmp323 = input.readListBegin();
        var _size22 = _rtmp323.size || 0;
        for (var _i24 = 0; _i24 < _size22; ++_i24) {
          var elem25 = null;
          elem25 = new ttypes.SealedTransaction();
          elem25.read(input);
          this.transactions.push(elem25);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PoolTransactionsGetResult.prototype.write = function(output) {
  output.writeStructBegin('PoolTransactionsGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.transactions !== null && this.transactions !== undefined) {
    output.writeFieldBegin('transactions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.transactions.length);
    for (var iter26 in this.transactions) {
      if (this.transactions.hasOwnProperty(iter26)) {
        iter26 = this.transactions[iter26];
        iter26.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var StatsGetResult = module.exports.StatsGetResult = function(args) {
  this.status = null;
  this.stats = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.APIResponse(args.status);
    }
    if (args.stats !== undefined && args.stats !== null) {
      this.stats = Thrift.copyList(args.stats, [ttypes.PeriodStats]);
    }
  }
};
StatsGetResult.prototype = {};
StatsGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.stats = [];
        var _rtmp328 = input.readListBegin();
        var _size27 = _rtmp328.size || 0;
        for (var _i29 = 0; _i29 < _size27; ++_i29) {
          var elem30 = null;
          elem30 = new ttypes.PeriodStats();
          elem30.read(input);
          this.stats.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatsGetResult.prototype.write = function(output) {
  output.writeStructBegin('StatsGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.stats !== null && this.stats !== undefined) {
    output.writeFieldBegin('stats', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.stats.length);
    for (var iter31 in this.stats) {
      if (this.stats.hasOwnProperty(iter31)) {
        iter31 = this.stats[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartContractGetResult = module.exports.SmartContractGetResult = function(args) {
  this.status = null;
  this.smartContract = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.APIResponse(args.status);
    }
    if (args.smartContract !== undefined && args.smartContract !== null) {
      this.smartContract = new ttypes.SmartContract(args.smartContract);
    }
  }
};
SmartContractGetResult.prototype = {};
SmartContractGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.smartContract = new ttypes.SmartContract();
        this.smartContract.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartContractGetResult.prototype.write = function(output) {
  output.writeStructBegin('SmartContractGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.smartContract !== null && this.smartContract !== undefined) {
    output.writeFieldBegin('smartContract', Thrift.Type.STRUCT, 2);
    this.smartContract.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartContractAddressesListGetResult = module.exports.SmartContractAddressesListGetResult = function(args) {
  this.status = null;
  this.addressesList = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.APIResponse(args.status);
    }
    if (args.addressesList !== undefined && args.addressesList !== null) {
      this.addressesList = Thrift.copyList(args.addressesList, [null]);
    }
  }
};
SmartContractAddressesListGetResult.prototype = {};
SmartContractAddressesListGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.addressesList = [];
        var _rtmp333 = input.readListBegin();
        var _size32 = _rtmp333.size || 0;
        for (var _i34 = 0; _i34 < _size32; ++_i34) {
          var elem35 = null;
          elem35 = input.readBinary();
          this.addressesList.push(elem35);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartContractAddressesListGetResult.prototype.write = function(output) {
  output.writeStructBegin('SmartContractAddressesListGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.addressesList !== null && this.addressesList !== undefined) {
    output.writeFieldBegin('addressesList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.addressesList.length);
    for (var iter36 in this.addressesList) {
      if (this.addressesList.hasOwnProperty(iter36)) {
        iter36 = this.addressesList[iter36];
        output.writeBinary(iter36);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartContractsListGetResult = module.exports.SmartContractsListGetResult = function(args) {
  this.status = null;
  this.count = null;
  this.smartContractsList = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.APIResponse(args.status);
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.smartContractsList !== undefined && args.smartContractsList !== null) {
      this.smartContractsList = Thrift.copyList(args.smartContractsList, [ttypes.SmartContract]);
    }
  }
};
SmartContractsListGetResult.prototype = {};
SmartContractsListGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.smartContractsList = [];
        var _rtmp338 = input.readListBegin();
        var _size37 = _rtmp338.size || 0;
        for (var _i39 = 0; _i39 < _size37; ++_i39) {
          var elem40 = null;
          elem40 = new ttypes.SmartContract();
          elem40.read(input);
          this.smartContractsList.push(elem40);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartContractsListGetResult.prototype.write = function(output) {
  output.writeStructBegin('SmartContractsListGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 2);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.smartContractsList !== null && this.smartContractsList !== undefined) {
    output.writeFieldBegin('smartContractsList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.smartContractsList.length);
    for (var iter41 in this.smartContractsList) {
      if (this.smartContractsList.hasOwnProperty(iter41)) {
        iter41 = this.smartContractsList[iter41];
        iter41.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartMethodParamsGetResult = module.exports.SmartMethodParamsGetResult = function(args) {
  this.status = null;
  this.method = null;
  this.params = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.APIResponse(args.status);
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = Thrift.copyList(args.params, [null]);
    }
  }
};
SmartMethodParamsGetResult.prototype = {};
SmartMethodParamsGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.method = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.params = [];
        var _rtmp343 = input.readListBegin();
        var _size42 = _rtmp343.size || 0;
        for (var _i44 = 0; _i44 < _size42; ++_i44) {
          var elem45 = null;
          elem45 = input.readString();
          this.params.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartMethodParamsGetResult.prototype.write = function(output) {
  output.writeStructBegin('SmartMethodParamsGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.STRING, 2);
    output.writeString(this.method);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.params.length);
    for (var iter46 in this.params) {
      if (this.params.hasOwnProperty(iter46)) {
        iter46 = this.params[iter46];
        output.writeString(iter46);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WalletInfo = module.exports.WalletInfo = function(args) {
  this.address = null;
  this.balance = null;
  this.transactionsNumber = null;
  this.firstTransactionTime = null;
  if (args) {
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.balance !== undefined && args.balance !== null) {
      this.balance = new ttypes.Amount(args.balance);
    }
    if (args.transactionsNumber !== undefined && args.transactionsNumber !== null) {
      this.transactionsNumber = args.transactionsNumber;
    }
    if (args.firstTransactionTime !== undefined && args.firstTransactionTime !== null) {
      this.firstTransactionTime = args.firstTransactionTime;
    }
  }
};
WalletInfo.prototype = {};
WalletInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.balance = new ttypes.Amount();
        this.balance.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.transactionsNumber = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.firstTransactionTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WalletInfo.prototype.write = function(output) {
  output.writeStructBegin('WalletInfo');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  if (this.balance !== null && this.balance !== undefined) {
    output.writeFieldBegin('balance', Thrift.Type.STRUCT, 2);
    this.balance.write(output);
    output.writeFieldEnd();
  }
  if (this.transactionsNumber !== null && this.transactionsNumber !== undefined) {
    output.writeFieldBegin('transactionsNumber', Thrift.Type.I64, 3);
    output.writeI64(this.transactionsNumber);
    output.writeFieldEnd();
  }
  if (this.firstTransactionTime !== null && this.firstTransactionTime !== undefined) {
    output.writeFieldBegin('firstTransactionTime', Thrift.Type.I64, 4);
    output.writeI64(this.firstTransactionTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WalletsGetResult = module.exports.WalletsGetResult = function(args) {
  this.status = null;
  this.count = null;
  this.wallets = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.APIResponse(args.status);
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.wallets !== undefined && args.wallets !== null) {
      this.wallets = Thrift.copyList(args.wallets, [ttypes.WalletInfo]);
    }
  }
};
WalletsGetResult.prototype = {};
WalletsGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.wallets = [];
        var _rtmp348 = input.readListBegin();
        var _size47 = _rtmp348.size || 0;
        for (var _i49 = 0; _i49 < _size47; ++_i49) {
          var elem50 = null;
          elem50 = new ttypes.WalletInfo();
          elem50.read(input);
          this.wallets.push(elem50);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WalletsGetResult.prototype.write = function(output) {
  output.writeStructBegin('WalletsGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 2);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.wallets !== null && this.wallets !== undefined) {
    output.writeFieldBegin('wallets', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.wallets.length);
    for (var iter51 in this.wallets) {
      if (this.wallets.hasOwnProperty(iter51)) {
        iter51 = this.wallets[iter51];
        iter51.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WriterInfo = module.exports.WriterInfo = function(args) {
  this.address = null;
  this.timesWriter = null;
  this.feeCollected = null;
  if (args) {
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.timesWriter !== undefined && args.timesWriter !== null) {
      this.timesWriter = args.timesWriter;
    }
    if (args.feeCollected !== undefined && args.feeCollected !== null) {
      this.feeCollected = new ttypes.Amount(args.feeCollected);
    }
  }
};
WriterInfo.prototype = {};
WriterInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.timesWriter = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.feeCollected = new ttypes.Amount();
        this.feeCollected.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WriterInfo.prototype.write = function(output) {
  output.writeStructBegin('WriterInfo');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  if (this.timesWriter !== null && this.timesWriter !== undefined) {
    output.writeFieldBegin('timesWriter', Thrift.Type.I32, 2);
    output.writeI32(this.timesWriter);
    output.writeFieldEnd();
  }
  if (this.feeCollected !== null && this.feeCollected !== undefined) {
    output.writeFieldBegin('feeCollected', Thrift.Type.STRUCT, 3);
    this.feeCollected.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WritersGetResult = module.exports.WritersGetResult = function(args) {
  this.status = null;
  this.pages = null;
  this.writers = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.APIResponse(args.status);
    }
    if (args.pages !== undefined && args.pages !== null) {
      this.pages = args.pages;
    }
    if (args.writers !== undefined && args.writers !== null) {
      this.writers = Thrift.copyList(args.writers, [ttypes.WriterInfo]);
    }
  }
};
WritersGetResult.prototype = {};
WritersGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pages = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.writers = [];
        var _rtmp353 = input.readListBegin();
        var _size52 = _rtmp353.size || 0;
        for (var _i54 = 0; _i54 < _size52; ++_i54) {
          var elem55 = null;
          elem55 = new ttypes.WriterInfo();
          elem55.read(input);
          this.writers.push(elem55);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WritersGetResult.prototype.write = function(output) {
  output.writeStructBegin('WritersGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.pages !== null && this.pages !== undefined) {
    output.writeFieldBegin('pages', Thrift.Type.I32, 2);
    output.writeI32(this.pages);
    output.writeFieldEnd();
  }
  if (this.writers !== null && this.writers !== undefined) {
    output.writeFieldBegin('writers', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.writers.length);
    for (var iter56 in this.writers) {
      if (this.writers.hasOwnProperty(iter56)) {
        iter56 = this.writers[iter56];
        iter56.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenInfo = module.exports.TokenInfo = function(args) {
  this.address = null;
  this.code = null;
  this.name = null;
  this.totalSupply = null;
  this.owner = null;
  this.transfersCount = null;
  this.transactionsCount = null;
  this.holdersCount = null;
  this.standart = null;
  if (args) {
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.totalSupply !== undefined && args.totalSupply !== null) {
      this.totalSupply = args.totalSupply;
    }
    if (args.owner !== undefined && args.owner !== null) {
      this.owner = args.owner;
    }
    if (args.transfersCount !== undefined && args.transfersCount !== null) {
      this.transfersCount = args.transfersCount;
    }
    if (args.transactionsCount !== undefined && args.transactionsCount !== null) {
      this.transactionsCount = args.transactionsCount;
    }
    if (args.holdersCount !== undefined && args.holdersCount !== null) {
      this.holdersCount = args.holdersCount;
    }
    if (args.standart !== undefined && args.standart !== null) {
      this.standart = args.standart;
    }
  }
};
TokenInfo.prototype = {};
TokenInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.totalSupply = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.owner = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.transfersCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.transactionsCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.holdersCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.standart = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenInfo.prototype.write = function(output) {
  output.writeStructBegin('TokenInfo');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 2);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.totalSupply !== null && this.totalSupply !== undefined) {
    output.writeFieldBegin('totalSupply', Thrift.Type.STRING, 4);
    output.writeString(this.totalSupply);
    output.writeFieldEnd();
  }
  if (this.owner !== null && this.owner !== undefined) {
    output.writeFieldBegin('owner', Thrift.Type.STRING, 5);
    output.writeBinary(this.owner);
    output.writeFieldEnd();
  }
  if (this.transfersCount !== null && this.transfersCount !== undefined) {
    output.writeFieldBegin('transfersCount', Thrift.Type.I32, 6);
    output.writeI32(this.transfersCount);
    output.writeFieldEnd();
  }
  if (this.transactionsCount !== null && this.transactionsCount !== undefined) {
    output.writeFieldBegin('transactionsCount', Thrift.Type.I32, 7);
    output.writeI32(this.transactionsCount);
    output.writeFieldEnd();
  }
  if (this.holdersCount !== null && this.holdersCount !== undefined) {
    output.writeFieldBegin('holdersCount', Thrift.Type.I32, 8);
    output.writeI32(this.holdersCount);
    output.writeFieldEnd();
  }
  if (this.standart !== null && this.standart !== undefined) {
    output.writeFieldBegin('standart', Thrift.Type.I32, 9);
    output.writeI32(this.standart);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenBalance = module.exports.TokenBalance = function(args) {
  this.token = null;
  this.code = null;
  this.balance = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.balance !== undefined && args.balance !== null) {
      this.balance = args.balance;
    }
  }
};
TokenBalance.prototype = {};
TokenBalance.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.balance = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenBalance.prototype.write = function(output) {
  output.writeStructBegin('TokenBalance');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeBinary(this.token);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 2);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.balance !== null && this.balance !== undefined) {
    output.writeFieldBegin('balance', Thrift.Type.STRING, 3);
    output.writeString(this.balance);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenTransfer = module.exports.TokenTransfer = function(args) {
  this.token = null;
  this.code = null;
  this.sender = null;
  this.receiver = null;
  this.amount = null;
  this.initiator = null;
  this.transaction = null;
  this.time = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.sender !== undefined && args.sender !== null) {
      this.sender = args.sender;
    }
    if (args.receiver !== undefined && args.receiver !== null) {
      this.receiver = args.receiver;
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = args.amount;
    }
    if (args.initiator !== undefined && args.initiator !== null) {
      this.initiator = args.initiator;
    }
    if (args.transaction !== undefined && args.transaction !== null) {
      this.transaction = new ttypes.TransactionId(args.transaction);
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    }
  }
};
TokenTransfer.prototype = {};
TokenTransfer.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sender = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.receiver = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.amount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.initiator = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.transaction = new ttypes.TransactionId();
        this.transaction.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenTransfer.prototype.write = function(output) {
  output.writeStructBegin('TokenTransfer');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeBinary(this.token);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 2);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.sender !== null && this.sender !== undefined) {
    output.writeFieldBegin('sender', Thrift.Type.STRING, 3);
    output.writeBinary(this.sender);
    output.writeFieldEnd();
  }
  if (this.receiver !== null && this.receiver !== undefined) {
    output.writeFieldBegin('receiver', Thrift.Type.STRING, 4);
    output.writeBinary(this.receiver);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.STRING, 5);
    output.writeString(this.amount);
    output.writeFieldEnd();
  }
  if (this.initiator !== null && this.initiator !== undefined) {
    output.writeFieldBegin('initiator', Thrift.Type.STRING, 6);
    output.writeBinary(this.initiator);
    output.writeFieldEnd();
  }
  if (this.transaction !== null && this.transaction !== undefined) {
    output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 7);
    this.transaction.write(output);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 8);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenTransaction = module.exports.TokenTransaction = function(args) {
  this.token = null;
  this.transaction = null;
  this.time = null;
  this.initiator = null;
  this.method = null;
  this.params = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.transaction !== undefined && args.transaction !== null) {
      this.transaction = new ttypes.TransactionId(args.transaction);
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    }
    if (args.initiator !== undefined && args.initiator !== null) {
      this.initiator = args.initiator;
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = Thrift.copyList(args.params, [null]);
    }
  }
};
TokenTransaction.prototype = {};
TokenTransaction.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.transaction = new ttypes.TransactionId();
        this.transaction.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.initiator = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.method = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        this.params = [];
        var _rtmp358 = input.readListBegin();
        var _size57 = _rtmp358.size || 0;
        for (var _i59 = 0; _i59 < _size57; ++_i59) {
          var elem60 = null;
          elem60 = input.readString();
          this.params.push(elem60);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenTransaction.prototype.write = function(output) {
  output.writeStructBegin('TokenTransaction');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeBinary(this.token);
    output.writeFieldEnd();
  }
  if (this.transaction !== null && this.transaction !== undefined) {
    output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 2);
    this.transaction.write(output);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 3);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  if (this.initiator !== null && this.initiator !== undefined) {
    output.writeFieldBegin('initiator', Thrift.Type.STRING, 4);
    output.writeBinary(this.initiator);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.STRING, 5);
    output.writeString(this.method);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.params.length);
    for (var iter61 in this.params) {
      if (this.params.hasOwnProperty(iter61)) {
        iter61 = this.params[iter61];
        output.writeString(iter61);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenHolder = module.exports.TokenHolder = function(args) {
  this.holder = null;
  this.token = null;
  this.balance = null;
  this.transfersCount = null;
  if (args) {
    if (args.holder !== undefined && args.holder !== null) {
      this.holder = args.holder;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.balance !== undefined && args.balance !== null) {
      this.balance = args.balance;
    }
    if (args.transfersCount !== undefined && args.transfersCount !== null) {
      this.transfersCount = args.transfersCount;
    }
  }
};
TokenHolder.prototype = {};
TokenHolder.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.holder = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.balance = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.transfersCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenHolder.prototype.write = function(output) {
  output.writeStructBegin('TokenHolder');
  if (this.holder !== null && this.holder !== undefined) {
    output.writeFieldBegin('holder', Thrift.Type.STRING, 1);
    output.writeBinary(this.holder);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 2);
    output.writeBinary(this.token);
    output.writeFieldEnd();
  }
  if (this.balance !== null && this.balance !== undefined) {
    output.writeFieldBegin('balance', Thrift.Type.STRING, 3);
    output.writeString(this.balance);
    output.writeFieldEnd();
  }
  if (this.transfersCount !== null && this.transfersCount !== undefined) {
    output.writeFieldBegin('transfersCount', Thrift.Type.I32, 4);
    output.writeI32(this.transfersCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenBalancesResult = module.exports.TokenBalancesResult = function(args) {
  this.status = null;
  this.balances = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.APIResponse(args.status);
    }
    if (args.balances !== undefined && args.balances !== null) {
      this.balances = Thrift.copyList(args.balances, [ttypes.TokenBalance]);
    }
  }
};
TokenBalancesResult.prototype = {};
TokenBalancesResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.balances = [];
        var _rtmp363 = input.readListBegin();
        var _size62 = _rtmp363.size || 0;
        for (var _i64 = 0; _i64 < _size62; ++_i64) {
          var elem65 = null;
          elem65 = new ttypes.TokenBalance();
          elem65.read(input);
          this.balances.push(elem65);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenBalancesResult.prototype.write = function(output) {
  output.writeStructBegin('TokenBalancesResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.balances !== null && this.balances !== undefined) {
    output.writeFieldBegin('balances', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.balances.length);
    for (var iter66 in this.balances) {
      if (this.balances.hasOwnProperty(iter66)) {
        iter66 = this.balances[iter66];
        iter66.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenTransfersResult = module.exports.TokenTransfersResult = function(args) {
  this.status = null;
  this.count = null;
  this.transfers = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.APIResponse(args.status);
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.transfers !== undefined && args.transfers !== null) {
      this.transfers = Thrift.copyList(args.transfers, [ttypes.TokenTransfer]);
    }
  }
};
TokenTransfersResult.prototype = {};
TokenTransfersResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.transfers = [];
        var _rtmp368 = input.readListBegin();
        var _size67 = _rtmp368.size || 0;
        for (var _i69 = 0; _i69 < _size67; ++_i69) {
          var elem70 = null;
          elem70 = new ttypes.TokenTransfer();
          elem70.read(input);
          this.transfers.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenTransfersResult.prototype.write = function(output) {
  output.writeStructBegin('TokenTransfersResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 2);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.transfers !== null && this.transfers !== undefined) {
    output.writeFieldBegin('transfers', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.transfers.length);
    for (var iter71 in this.transfers) {
      if (this.transfers.hasOwnProperty(iter71)) {
        iter71 = this.transfers[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenTransactionsResult = module.exports.TokenTransactionsResult = function(args) {
  this.status = null;
  this.count = null;
  this.transactions = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.APIResponse(args.status);
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.transactions !== undefined && args.transactions !== null) {
      this.transactions = Thrift.copyList(args.transactions, [ttypes.TokenTransaction]);
    }
  }
};
TokenTransactionsResult.prototype = {};
TokenTransactionsResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.transactions = [];
        var _rtmp373 = input.readListBegin();
        var _size72 = _rtmp373.size || 0;
        for (var _i74 = 0; _i74 < _size72; ++_i74) {
          var elem75 = null;
          elem75 = new ttypes.TokenTransaction();
          elem75.read(input);
          this.transactions.push(elem75);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenTransactionsResult.prototype.write = function(output) {
  output.writeStructBegin('TokenTransactionsResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 2);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.transactions !== null && this.transactions !== undefined) {
    output.writeFieldBegin('transactions', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.transactions.length);
    for (var iter76 in this.transactions) {
      if (this.transactions.hasOwnProperty(iter76)) {
        iter76 = this.transactions[iter76];
        iter76.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenInfoResult = module.exports.TokenInfoResult = function(args) {
  this.status = null;
  this.token = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.APIResponse(args.status);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.TokenInfo(args.token);
    }
  }
};
TokenInfoResult.prototype = {};
TokenInfoResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.TokenInfo();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenInfoResult.prototype.write = function(output) {
  output.writeStructBegin('TokenInfoResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenHoldersResult = module.exports.TokenHoldersResult = function(args) {
  this.status = null;
  this.count = null;
  this.holders = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.APIResponse(args.status);
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.holders !== undefined && args.holders !== null) {
      this.holders = Thrift.copyList(args.holders, [ttypes.TokenHolder]);
    }
  }
};
TokenHoldersResult.prototype = {};
TokenHoldersResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.holders = [];
        var _rtmp378 = input.readListBegin();
        var _size77 = _rtmp378.size || 0;
        for (var _i79 = 0; _i79 < _size77; ++_i79) {
          var elem80 = null;
          elem80 = new ttypes.TokenHolder();
          elem80.read(input);
          this.holders.push(elem80);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenHoldersResult.prototype.write = function(output) {
  output.writeStructBegin('TokenHoldersResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 2);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.holders !== null && this.holders !== undefined) {
    output.writeFieldBegin('holders', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.holders.length);
    for (var iter81 in this.holders) {
      if (this.holders.hasOwnProperty(iter81)) {
        iter81 = this.holders[iter81];
        iter81.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokensListResult = module.exports.TokensListResult = function(args) {
  this.status = null;
  this.count = null;
  this.tokens = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.APIResponse(args.status);
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.tokens !== undefined && args.tokens !== null) {
      this.tokens = Thrift.copyList(args.tokens, [ttypes.TokenInfo]);
    }
  }
};
TokensListResult.prototype = {};
TokensListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.tokens = [];
        var _rtmp383 = input.readListBegin();
        var _size82 = _rtmp383.size || 0;
        for (var _i84 = 0; _i84 < _size82; ++_i84) {
          var elem85 = null;
          elem85 = new ttypes.TokenInfo();
          elem85.read(input);
          this.tokens.push(elem85);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokensListResult.prototype.write = function(output) {
  output.writeStructBegin('TokensListResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 2);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.tokens !== null && this.tokens !== undefined) {
    output.writeFieldBegin('tokens', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.tokens.length);
    for (var iter86 in this.tokens) {
      if (this.tokens.hasOwnProperty(iter86)) {
        iter86 = this.tokens[iter86];
        iter86.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartContractMethodArgument = module.exports.SmartContractMethodArgument = function(args) {
  this.type = null;
  this.name = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
SmartContractMethodArgument.prototype = {};
SmartContractMethodArgument.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartContractMethodArgument.prototype.write = function(output) {
  output.writeStructBegin('SmartContractMethodArgument');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartContractMethod = module.exports.SmartContractMethod = function(args) {
  this.returnType = null;
  this.name = null;
  this.arguments = null;
  if (args) {
    if (args.returnType !== undefined && args.returnType !== null) {
      this.returnType = args.returnType;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.arguments !== undefined && args.arguments !== null) {
      this.arguments = Thrift.copyList(args.arguments, [ttypes.SmartContractMethodArgument]);
    }
  }
};
SmartContractMethod.prototype = {};
SmartContractMethod.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.returnType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.arguments = [];
        var _rtmp388 = input.readListBegin();
        var _size87 = _rtmp388.size || 0;
        for (var _i89 = 0; _i89 < _size87; ++_i89) {
          var elem90 = null;
          elem90 = new ttypes.SmartContractMethodArgument();
          elem90.read(input);
          this.arguments.push(elem90);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartContractMethod.prototype.write = function(output) {
  output.writeStructBegin('SmartContractMethod');
  if (this.returnType !== null && this.returnType !== undefined) {
    output.writeFieldBegin('returnType', Thrift.Type.STRING, 1);
    output.writeString(this.returnType);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.arguments !== null && this.arguments !== undefined) {
    output.writeFieldBegin('arguments', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.arguments.length);
    for (var iter91 in this.arguments) {
      if (this.arguments.hasOwnProperty(iter91)) {
        iter91 = this.arguments[iter91];
        iter91.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartContractDataResult = module.exports.SmartContractDataResult = function(args) {
  this.status = null;
  this.methods = null;
  this.variables = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.APIResponse(args.status);
    }
    if (args.methods !== undefined && args.methods !== null) {
      this.methods = Thrift.copyList(args.methods, [ttypes.SmartContractMethod]);
    }
    if (args.variables !== undefined && args.variables !== null) {
      this.variables = Thrift.copyMap(args.variables, [variant_ttypes.Variant]);
    }
  }
};
SmartContractDataResult.prototype = {};
SmartContractDataResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.methods = [];
        var _rtmp393 = input.readListBegin();
        var _size92 = _rtmp393.size || 0;
        for (var _i94 = 0; _i94 < _size92; ++_i94) {
          var elem95 = null;
          elem95 = new ttypes.SmartContractMethod();
          elem95.read(input);
          this.methods.push(elem95);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.variables = {};
        var _rtmp397 = input.readMapBegin();
        var _size96 = _rtmp397.size || 0;
        for (var _i98 = 0; _i98 < _size96; ++_i98) {
          var key99 = null;
          var val100 = null;
          key99 = input.readString();
          val100 = new variant_ttypes.Variant();
          val100.read(input);
          this.variables[key99] = val100;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartContractDataResult.prototype.write = function(output) {
  output.writeStructBegin('SmartContractDataResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.methods !== null && this.methods !== undefined) {
    output.writeFieldBegin('methods', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.methods.length);
    for (var iter101 in this.methods) {
      if (this.methods.hasOwnProperty(iter101)) {
        iter101 = this.methods[iter101];
        iter101.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.variables !== null && this.variables !== undefined) {
    output.writeFieldBegin('variables', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.variables));
    for (var kiter102 in this.variables) {
      if (this.variables.hasOwnProperty(kiter102)) {
        var viter103 = this.variables[kiter102];
        output.writeString(kiter102);
        viter103.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartContractCompileResult = module.exports.SmartContractCompileResult = function(args) {
  this.status = null;
  this.byteCode = null;
  this.ts = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.APIResponse(args.status);
    }
    if (args.byteCode !== undefined && args.byteCode !== null) {
      this.byteCode = args.byteCode;
    }
    if (args.ts !== undefined && args.ts !== null) {
      this.ts = args.ts;
    }
  }
};
SmartContractCompileResult.prototype = {};
SmartContractCompileResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.byteCode = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.ts = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartContractCompileResult.prototype.write = function(output) {
  output.writeStructBegin('SmartContractCompileResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.byteCode !== null && this.byteCode !== undefined) {
    output.writeFieldBegin('byteCode', Thrift.Type.STRING, 2);
    output.writeBinary(this.byteCode);
    output.writeFieldEnd();
  }
  if (this.ts !== null && this.ts !== undefined) {
    output.writeFieldBegin('ts', Thrift.Type.I32, 3);
    output.writeI32(this.ts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

