//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

ContractExecutor_executeByteCode_args = function(args) {
  this.address = null;
  this.byteCodeObjects = null;
  this.contractState = null;
  this.method = null;
  this.params = null;
  this.executionTime = null;
  if (args) {
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.byteCodeObjects !== undefined && args.byteCodeObjects !== null) {
      this.byteCodeObjects = Thrift.copyList(args.byteCodeObjects, [ByteCodeObject]);
    }
    if (args.contractState !== undefined && args.contractState !== null) {
      this.contractState = args.contractState;
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = Thrift.copyList(args.params, [Variant]);
    }
    if (args.executionTime !== undefined && args.executionTime !== null) {
      this.executionTime = args.executionTime;
    }
  }
};
ContractExecutor_executeByteCode_args.prototype = {};
ContractExecutor_executeByteCode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size34 = 0;
        var _rtmp338;
        this.byteCodeObjects = [];
        var _etype37 = 0;
        _rtmp338 = input.readListBegin();
        _etype37 = _rtmp338.etype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          var elem40 = null;
          elem40 = new ByteCodeObject();
          elem40.read(input);
          this.byteCodeObjects.push(elem40);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.contractState = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.method = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size41 = 0;
        var _rtmp345;
        this.params = [];
        var _etype44 = 0;
        _rtmp345 = input.readListBegin();
        _etype44 = _rtmp345.etype;
        _size41 = _rtmp345.size;
        for (var _i46 = 0; _i46 < _size41; ++_i46)
        {
          var elem47 = null;
          elem47 = new Variant();
          elem47.read(input);
          this.params.push(elem47);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.executionTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_executeByteCode_args.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_executeByteCode_args');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  if (this.byteCodeObjects !== null && this.byteCodeObjects !== undefined) {
    output.writeFieldBegin('byteCodeObjects', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.byteCodeObjects.length);
    for (var iter48 in this.byteCodeObjects)
    {
      if (this.byteCodeObjects.hasOwnProperty(iter48))
      {
        iter48 = this.byteCodeObjects[iter48];
        iter48.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.contractState !== null && this.contractState !== undefined) {
    output.writeFieldBegin('contractState', Thrift.Type.STRING, 3);
    output.writeBinary(this.contractState);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.STRING, 4);
    output.writeString(this.method);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.params.length);
    for (var iter49 in this.params)
    {
      if (this.params.hasOwnProperty(iter49))
      {
        iter49 = this.params[iter49];
        iter49.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.executionTime !== null && this.executionTime !== undefined) {
    output.writeFieldBegin('executionTime', Thrift.Type.I64, 6);
    output.writeI64(this.executionTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContractExecutor_executeByteCode_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ExecuteByteCodeResult(args.success);
    }
  }
};
ContractExecutor_executeByteCode_result.prototype = {};
ContractExecutor_executeByteCode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ExecuteByteCodeResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_executeByteCode_result.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_executeByteCode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContractExecutor_executeByteCodeMultiple_args = function(args) {
  this.address = null;
  this.byteCodeObjects = null;
  this.contractState = null;
  this.method = null;
  this.params = null;
  this.executionTime = null;
  if (args) {
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.byteCodeObjects !== undefined && args.byteCodeObjects !== null) {
      this.byteCodeObjects = Thrift.copyList(args.byteCodeObjects, [ByteCodeObject]);
    }
    if (args.contractState !== undefined && args.contractState !== null) {
      this.contractState = args.contractState;
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = Thrift.copyList(args.params, [Thrift.copyList, Variant]);
    }
    if (args.executionTime !== undefined && args.executionTime !== null) {
      this.executionTime = args.executionTime;
    }
  }
};
ContractExecutor_executeByteCodeMultiple_args.prototype = {};
ContractExecutor_executeByteCodeMultiple_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size50 = 0;
        var _rtmp354;
        this.byteCodeObjects = [];
        var _etype53 = 0;
        _rtmp354 = input.readListBegin();
        _etype53 = _rtmp354.etype;
        _size50 = _rtmp354.size;
        for (var _i55 = 0; _i55 < _size50; ++_i55)
        {
          var elem56 = null;
          elem56 = new ByteCodeObject();
          elem56.read(input);
          this.byteCodeObjects.push(elem56);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.contractState = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.method = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size57 = 0;
        var _rtmp361;
        this.params = [];
        var _etype60 = 0;
        _rtmp361 = input.readListBegin();
        _etype60 = _rtmp361.etype;
        _size57 = _rtmp361.size;
        for (var _i62 = 0; _i62 < _size57; ++_i62)
        {
          var elem63 = null;
          var _size64 = 0;
          var _rtmp368;
          elem63 = [];
          var _etype67 = 0;
          _rtmp368 = input.readListBegin();
          _etype67 = _rtmp368.etype;
          _size64 = _rtmp368.size;
          for (var _i69 = 0; _i69 < _size64; ++_i69)
          {
            var elem70 = null;
            elem70 = new Variant();
            elem70.read(input);
            elem63.push(elem70);
          }
          input.readListEnd();
          this.params.push(elem63);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.executionTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_executeByteCodeMultiple_args.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_executeByteCodeMultiple_args');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  if (this.byteCodeObjects !== null && this.byteCodeObjects !== undefined) {
    output.writeFieldBegin('byteCodeObjects', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.byteCodeObjects.length);
    for (var iter71 in this.byteCodeObjects)
    {
      if (this.byteCodeObjects.hasOwnProperty(iter71))
      {
        iter71 = this.byteCodeObjects[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.contractState !== null && this.contractState !== undefined) {
    output.writeFieldBegin('contractState', Thrift.Type.STRING, 3);
    output.writeBinary(this.contractState);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.STRING, 4);
    output.writeString(this.method);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.LIST, this.params.length);
    for (var iter72 in this.params)
    {
      if (this.params.hasOwnProperty(iter72))
      {
        iter72 = this.params[iter72];
        output.writeListBegin(Thrift.Type.STRUCT, iter72.length);
        for (var iter73 in iter72)
        {
          if (iter72.hasOwnProperty(iter73))
          {
            iter73 = iter72[iter73];
            iter73.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.executionTime !== null && this.executionTime !== undefined) {
    output.writeFieldBegin('executionTime', Thrift.Type.I64, 6);
    output.writeI64(this.executionTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContractExecutor_executeByteCodeMultiple_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ExecuteByteCodeMultipleResult(args.success);
    }
  }
};
ContractExecutor_executeByteCodeMultiple_result.prototype = {};
ContractExecutor_executeByteCodeMultiple_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ExecuteByteCodeMultipleResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_executeByteCodeMultiple_result.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_executeByteCodeMultiple_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContractExecutor_getContractMethods_args = function(args) {
  this.byteCodeObjects = null;
  if (args) {
    if (args.byteCodeObjects !== undefined && args.byteCodeObjects !== null) {
      this.byteCodeObjects = Thrift.copyList(args.byteCodeObjects, [ByteCodeObject]);
    }
  }
};
ContractExecutor_getContractMethods_args.prototype = {};
ContractExecutor_getContractMethods_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size74 = 0;
        var _rtmp378;
        this.byteCodeObjects = [];
        var _etype77 = 0;
        _rtmp378 = input.readListBegin();
        _etype77 = _rtmp378.etype;
        _size74 = _rtmp378.size;
        for (var _i79 = 0; _i79 < _size74; ++_i79)
        {
          var elem80 = null;
          elem80 = new ByteCodeObject();
          elem80.read(input);
          this.byteCodeObjects.push(elem80);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_getContractMethods_args.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_getContractMethods_args');
  if (this.byteCodeObjects !== null && this.byteCodeObjects !== undefined) {
    output.writeFieldBegin('byteCodeObjects', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.byteCodeObjects.length);
    for (var iter81 in this.byteCodeObjects)
    {
      if (this.byteCodeObjects.hasOwnProperty(iter81))
      {
        iter81 = this.byteCodeObjects[iter81];
        iter81.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContractExecutor_getContractMethods_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new GetContractMethodsResult(args.success);
    }
  }
};
ContractExecutor_getContractMethods_result.prototype = {};
ContractExecutor_getContractMethods_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new GetContractMethodsResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_getContractMethods_result.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_getContractMethods_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContractExecutor_getContractVariables_args = function(args) {
  this.byteCodeObjects = null;
  this.contractState = null;
  if (args) {
    if (args.byteCodeObjects !== undefined && args.byteCodeObjects !== null) {
      this.byteCodeObjects = Thrift.copyList(args.byteCodeObjects, [ByteCodeObject]);
    }
    if (args.contractState !== undefined && args.contractState !== null) {
      this.contractState = args.contractState;
    }
  }
};
ContractExecutor_getContractVariables_args.prototype = {};
ContractExecutor_getContractVariables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size82 = 0;
        var _rtmp386;
        this.byteCodeObjects = [];
        var _etype85 = 0;
        _rtmp386 = input.readListBegin();
        _etype85 = _rtmp386.etype;
        _size82 = _rtmp386.size;
        for (var _i87 = 0; _i87 < _size82; ++_i87)
        {
          var elem88 = null;
          elem88 = new ByteCodeObject();
          elem88.read(input);
          this.byteCodeObjects.push(elem88);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.contractState = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_getContractVariables_args.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_getContractVariables_args');
  if (this.byteCodeObjects !== null && this.byteCodeObjects !== undefined) {
    output.writeFieldBegin('byteCodeObjects', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.byteCodeObjects.length);
    for (var iter89 in this.byteCodeObjects)
    {
      if (this.byteCodeObjects.hasOwnProperty(iter89))
      {
        iter89 = this.byteCodeObjects[iter89];
        iter89.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.contractState !== null && this.contractState !== undefined) {
    output.writeFieldBegin('contractState', Thrift.Type.STRING, 2);
    output.writeBinary(this.contractState);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContractExecutor_getContractVariables_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new GetContractVariablesResult(args.success);
    }
  }
};
ContractExecutor_getContractVariables_result.prototype = {};
ContractExecutor_getContractVariables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new GetContractVariablesResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_getContractVariables_result.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_getContractVariables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContractExecutor_compileSourceCode_args = function(args) {
  this.sourceCode = null;
  if (args) {
    if (args.sourceCode !== undefined && args.sourceCode !== null) {
      this.sourceCode = args.sourceCode;
    }
  }
};
ContractExecutor_compileSourceCode_args.prototype = {};
ContractExecutor_compileSourceCode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sourceCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_compileSourceCode_args.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_compileSourceCode_args');
  if (this.sourceCode !== null && this.sourceCode !== undefined) {
    output.writeFieldBegin('sourceCode', Thrift.Type.STRING, 1);
    output.writeString(this.sourceCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContractExecutor_compileSourceCode_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new CompileSourceCodeResult(args.success);
    }
  }
};
ContractExecutor_compileSourceCode_result.prototype = {};
ContractExecutor_compileSourceCode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new CompileSourceCodeResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_compileSourceCode_result.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_compileSourceCode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContractExecutorClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
ContractExecutorClient.prototype = {};
ContractExecutorClient.prototype.executeByteCode = function(address, byteCodeObjects, contractState, method, params, executionTime, callback) {
  this.send_executeByteCode(address, byteCodeObjects, contractState, method, params, executionTime, callback); 
  if (!callback) {
    return this.recv_executeByteCode();
  }
};

ContractExecutorClient.prototype.send_executeByteCode = function(address, byteCodeObjects, contractState, method, params, executionTime, callback) {
  this.output.writeMessageBegin('executeByteCode', Thrift.MessageType.CALL, this.seqid);
  var params = {
    address: address,
    byteCodeObjects: byteCodeObjects,
    contractState: contractState,
    method: method,
    params: params,
    executionTime: executionTime
  };
  var args = new ContractExecutor_executeByteCode_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_executeByteCode();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ContractExecutorClient.prototype.recv_executeByteCode = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ContractExecutor_executeByteCode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'executeByteCode failed: unknown result';
};
ContractExecutorClient.prototype.executeByteCodeMultiple = function(address, byteCodeObjects, contractState, method, params, executionTime, callback) {
  this.send_executeByteCodeMultiple(address, byteCodeObjects, contractState, method, params, executionTime, callback); 
  if (!callback) {
    return this.recv_executeByteCodeMultiple();
  }
};

ContractExecutorClient.prototype.send_executeByteCodeMultiple = function(address, byteCodeObjects, contractState, method, params, executionTime, callback) {
  this.output.writeMessageBegin('executeByteCodeMultiple', Thrift.MessageType.CALL, this.seqid);
  var params = {
    address: address,
    byteCodeObjects: byteCodeObjects,
    contractState: contractState,
    method: method,
    params: params,
    executionTime: executionTime
  };
  var args = new ContractExecutor_executeByteCodeMultiple_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_executeByteCodeMultiple();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ContractExecutorClient.prototype.recv_executeByteCodeMultiple = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ContractExecutor_executeByteCodeMultiple_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'executeByteCodeMultiple failed: unknown result';
};
ContractExecutorClient.prototype.getContractMethods = function(byteCodeObjects, callback) {
  this.send_getContractMethods(byteCodeObjects, callback); 
  if (!callback) {
    return this.recv_getContractMethods();
  }
};

ContractExecutorClient.prototype.send_getContractMethods = function(byteCodeObjects, callback) {
  this.output.writeMessageBegin('getContractMethods', Thrift.MessageType.CALL, this.seqid);
  var params = {
    byteCodeObjects: byteCodeObjects
  };
  var args = new ContractExecutor_getContractMethods_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getContractMethods();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ContractExecutorClient.prototype.recv_getContractMethods = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ContractExecutor_getContractMethods_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getContractMethods failed: unknown result';
};
ContractExecutorClient.prototype.getContractVariables = function(byteCodeObjects, contractState, callback) {
  this.send_getContractVariables(byteCodeObjects, contractState, callback); 
  if (!callback) {
    return this.recv_getContractVariables();
  }
};

ContractExecutorClient.prototype.send_getContractVariables = function(byteCodeObjects, contractState, callback) {
  this.output.writeMessageBegin('getContractVariables', Thrift.MessageType.CALL, this.seqid);
  var params = {
    byteCodeObjects: byteCodeObjects,
    contractState: contractState
  };
  var args = new ContractExecutor_getContractVariables_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getContractVariables();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ContractExecutorClient.prototype.recv_getContractVariables = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ContractExecutor_getContractVariables_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getContractVariables failed: unknown result';
};
ContractExecutorClient.prototype.compileSourceCode = function(sourceCode, callback) {
  this.send_compileSourceCode(sourceCode, callback); 
  if (!callback) {
    return this.recv_compileSourceCode();
  }
};

ContractExecutorClient.prototype.send_compileSourceCode = function(sourceCode, callback) {
  this.output.writeMessageBegin('compileSourceCode', Thrift.MessageType.CALL, this.seqid);
  var params = {
    sourceCode: sourceCode
  };
  var args = new ContractExecutor_compileSourceCode_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_compileSourceCode();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ContractExecutorClient.prototype.recv_compileSourceCode = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ContractExecutor_compileSourceCode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'compileSourceCode failed: unknown result';
};
