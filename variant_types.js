//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var Variant = module.exports.Variant = function(args) {
  this.v_bool = null;
  this.v_i8 = null;
  this.v_i16 = null;
  this.v_i32 = null;
  this.v_i64 = null;
  this.v_double = null;
  this.v_string = null;
  this.v_list = null;
  this.v_set = null;
  this.v_map = null;
  if (args) {
    if (args.v_bool !== undefined && args.v_bool !== null) {
      this.v_bool = args.v_bool;
    }
    if (args.v_i8 !== undefined && args.v_i8 !== null) {
      this.v_i8 = args.v_i8;
    }
    if (args.v_i16 !== undefined && args.v_i16 !== null) {
      this.v_i16 = args.v_i16;
    }
    if (args.v_i32 !== undefined && args.v_i32 !== null) {
      this.v_i32 = args.v_i32;
    }
    if (args.v_i64 !== undefined && args.v_i64 !== null) {
      this.v_i64 = args.v_i64;
    }
    if (args.v_double !== undefined && args.v_double !== null) {
      this.v_double = args.v_double;
    }
    if (args.v_string !== undefined && args.v_string !== null) {
      this.v_string = args.v_string;
    }
    if (args.v_list !== undefined && args.v_list !== null) {
      this.v_list = Thrift.copyList(args.v_list, [null]);
    }
    if (args.v_set !== undefined && args.v_set !== null) {
      this.v_set = Thrift.copyList(args.v_set, [null]);
    }
    if (args.v_map !== undefined && args.v_map !== null) {
      this.v_map = Thrift.copyMap(args.v_map, [null]);
    }
  }
};
Variant.prototype = {};
Variant.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.v_bool = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.v_i8 = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.v_i16 = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.v_i32 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.v_i64 = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.v_double = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.v_string = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        this.v_list = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new ttypes.Variant();
          elem3.read(input);
          this.v_list.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.SET) {
        this.v_set = [];
        var _rtmp35 = input.readSetBegin();
        var _size4 = _rtmp35.size || 0;
        for (var _i6 = 0; _i6 < _size4; ++_i6) {
          var elem7 = null;
          elem7 = new ttypes.Variant();
          elem7.read(input);
          this.v_set.push(elem7);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.MAP) {
        this.v_map = {};
        var _rtmp39 = input.readMapBegin();
        var _size8 = _rtmp39.size || 0;
        for (var _i10 = 0; _i10 < _size8; ++_i10) {
          var key11 = null;
          var val12 = null;
          key11 = new ttypes.Variant();
          key11.read(input);
          val12 = new ttypes.Variant();
          val12.read(input);
          this.v_map[key11] = val12;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Variant.prototype.write = function(output) {
  output.writeStructBegin('Variant');
  if (this.v_bool !== null && this.v_bool !== undefined) {
    output.writeFieldBegin('v_bool', Thrift.Type.BOOL, 1);
    output.writeBool(this.v_bool);
    output.writeFieldEnd();
  }
  if (this.v_i8 !== null && this.v_i8 !== undefined) {
    output.writeFieldBegin('v_i8', Thrift.Type.BYTE, 2);
    output.writeByte(this.v_i8);
    output.writeFieldEnd();
  }
  if (this.v_i16 !== null && this.v_i16 !== undefined) {
    output.writeFieldBegin('v_i16', Thrift.Type.I16, 3);
    output.writeI16(this.v_i16);
    output.writeFieldEnd();
  }
  if (this.v_i32 !== null && this.v_i32 !== undefined) {
    output.writeFieldBegin('v_i32', Thrift.Type.I32, 4);
    output.writeI32(this.v_i32);
    output.writeFieldEnd();
  }
  if (this.v_i64 !== null && this.v_i64 !== undefined) {
    output.writeFieldBegin('v_i64', Thrift.Type.I64, 5);
    output.writeI64(this.v_i64);
    output.writeFieldEnd();
  }
  if (this.v_double !== null && this.v_double !== undefined) {
    output.writeFieldBegin('v_double', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.v_double);
    output.writeFieldEnd();
  }
  if (this.v_string !== null && this.v_string !== undefined) {
    output.writeFieldBegin('v_string', Thrift.Type.STRING, 7);
    output.writeString(this.v_string);
    output.writeFieldEnd();
  }
  if (this.v_list !== null && this.v_list !== undefined) {
    output.writeFieldBegin('v_list', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.v_list.length);
    for (var iter13 in this.v_list) {
      if (this.v_list.hasOwnProperty(iter13)) {
        iter13 = this.v_list[iter13];
        iter13.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.v_set !== null && this.v_set !== undefined) {
    output.writeFieldBegin('v_set', Thrift.Type.SET, 9);
    output.writeSetBegin(Thrift.Type.STRUCT, this.v_set.length);
    for (var iter14 in this.v_set) {
      if (this.v_set.hasOwnProperty(iter14)) {
        iter14 = this.v_set[iter14];
        iter14.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.v_map !== null && this.v_map !== undefined) {
    output.writeFieldBegin('v_map', Thrift.Type.MAP, 10);
    output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.STRUCT, Thrift.objectLength(this.v_map));
    for (var kiter15 in this.v_map) {
      if (this.v_map.hasOwnProperty(kiter15)) {
        var viter16 = this.v_map[kiter15];
        kiter15.write(output);
        viter16.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

