//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var variant_ttypes = require('./variant_types');


var ttypes = require('./api_types');
//HELPER FUNCTIONS AND STRUCTURES

var API_BalanceGet_args = function(args) {
  this.address = null;
  this.currency = 1;
  if (args) {
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = args.currency;
    }
  }
};
API_BalanceGet_args.prototype = {};
API_BalanceGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.currency = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_BalanceGet_args.prototype.write = function(output) {
  output.writeStructBegin('API_BalanceGet_args');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.BYTE, 2);
    output.writeByte(this.currency);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_BalanceGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.BalanceGetResult(args.success);
    }
  }
};
API_BalanceGet_result.prototype = {};
API_BalanceGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BalanceGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_BalanceGet_result.prototype.write = function(output) {
  output.writeStructBegin('API_BalanceGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_TransactionGet_args = function(args) {
  this.transactionId = null;
  if (args) {
    if (args.transactionId !== undefined && args.transactionId !== null) {
      this.transactionId = new ttypes.TransactionId(args.transactionId);
    }
  }
};
API_TransactionGet_args.prototype = {};
API_TransactionGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.transactionId = new ttypes.TransactionId();
        this.transactionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_TransactionGet_args.prototype.write = function(output) {
  output.writeStructBegin('API_TransactionGet_args');
  if (this.transactionId !== null && this.transactionId !== undefined) {
    output.writeFieldBegin('transactionId', Thrift.Type.STRUCT, 1);
    this.transactionId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_TransactionGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TransactionGetResult(args.success);
    }
  }
};
API_TransactionGet_result.prototype = {};
API_TransactionGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TransactionGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_TransactionGet_result.prototype.write = function(output) {
  output.writeStructBegin('API_TransactionGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_TransactionsGet_args = function(args) {
  this.address = null;
  this.offset = null;
  this.limit = null;
  if (args) {
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
API_TransactionsGet_args.prototype = {};
API_TransactionsGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_TransactionsGet_args.prototype.write = function(output) {
  output.writeStructBegin('API_TransactionsGet_args');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 2);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 3);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_TransactionsGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TransactionsGetResult(args.success);
    }
  }
};
API_TransactionsGet_result.prototype = {};
API_TransactionsGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TransactionsGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_TransactionsGet_result.prototype.write = function(output) {
  output.writeStructBegin('API_TransactionsGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_TransactionFlow_args = function(args) {
  this.transaction = null;
  if (args) {
    if (args.transaction !== undefined && args.transaction !== null) {
      this.transaction = new ttypes.Transaction(args.transaction);
    }
  }
};
API_TransactionFlow_args.prototype = {};
API_TransactionFlow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.transaction = new ttypes.Transaction();
        this.transaction.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_TransactionFlow_args.prototype.write = function(output) {
  output.writeStructBegin('API_TransactionFlow_args');
  if (this.transaction !== null && this.transaction !== undefined) {
    output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 1);
    this.transaction.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_TransactionFlow_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TransactionFlowResult(args.success);
    }
  }
};
API_TransactionFlow_result.prototype = {};
API_TransactionFlow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TransactionFlowResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_TransactionFlow_result.prototype.write = function(output) {
  output.writeStructBegin('API_TransactionFlow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_TransactionsListGet_args = function(args) {
  this.offset = null;
  this.limit = null;
  if (args) {
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
API_TransactionsListGet_args.prototype = {};
API_TransactionsListGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_TransactionsListGet_args.prototype.write = function(output) {
  output.writeStructBegin('API_TransactionsListGet_args');
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 1);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 2);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_TransactionsListGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TransactionsGetResult(args.success);
    }
  }
};
API_TransactionsListGet_result.prototype = {};
API_TransactionsListGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TransactionsGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_TransactionsListGet_result.prototype.write = function(output) {
  output.writeStructBegin('API_TransactionsListGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_GetLastHash_args = function(args) {
};
API_GetLastHash_args.prototype = {};
API_GetLastHash_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_GetLastHash_args.prototype.write = function(output) {
  output.writeStructBegin('API_GetLastHash_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_GetLastHash_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
API_GetLastHash_result.prototype = {};
API_GetLastHash_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_GetLastHash_result.prototype.write = function(output) {
  output.writeStructBegin('API_GetLastHash_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_PoolListGetStable_args = function(args) {
  this.hash = null;
  this.limit = null;
  if (args) {
    if (args.hash !== undefined && args.hash !== null) {
      this.hash = args.hash;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
API_PoolListGetStable_args.prototype = {};
API_PoolListGetStable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hash = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_PoolListGetStable_args.prototype.write = function(output) {
  output.writeStructBegin('API_PoolListGetStable_args');
  if (this.hash !== null && this.hash !== undefined) {
    output.writeFieldBegin('hash', Thrift.Type.STRING, 1);
    output.writeBinary(this.hash);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 2);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_PoolListGetStable_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PoolListGetResult(args.success);
    }
  }
};
API_PoolListGetStable_result.prototype = {};
API_PoolListGetStable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PoolListGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_PoolListGetStable_result.prototype.write = function(output) {
  output.writeStructBegin('API_PoolListGetStable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_PoolListGet_args = function(args) {
  this.offset = null;
  this.limit = null;
  if (args) {
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
API_PoolListGet_args.prototype = {};
API_PoolListGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_PoolListGet_args.prototype.write = function(output) {
  output.writeStructBegin('API_PoolListGet_args');
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 1);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 2);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_PoolListGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PoolListGetResult(args.success);
    }
  }
};
API_PoolListGet_result.prototype = {};
API_PoolListGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PoolListGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_PoolListGet_result.prototype.write = function(output) {
  output.writeStructBegin('API_PoolListGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_PoolInfoGet_args = function(args) {
  this.hash = null;
  this.index = null;
  if (args) {
    if (args.hash !== undefined && args.hash !== null) {
      this.hash = args.hash;
    }
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
  }
};
API_PoolInfoGet_args.prototype = {};
API_PoolInfoGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hash = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.index = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_PoolInfoGet_args.prototype.write = function(output) {
  output.writeStructBegin('API_PoolInfoGet_args');
  if (this.hash !== null && this.hash !== undefined) {
    output.writeFieldBegin('hash', Thrift.Type.STRING, 1);
    output.writeBinary(this.hash);
    output.writeFieldEnd();
  }
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I64, 2);
    output.writeI64(this.index);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_PoolInfoGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PoolInfoGetResult(args.success);
    }
  }
};
API_PoolInfoGet_result.prototype = {};
API_PoolInfoGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PoolInfoGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_PoolInfoGet_result.prototype.write = function(output) {
  output.writeStructBegin('API_PoolInfoGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_PoolTransactionsGet_args = function(args) {
  this.hash = null;
  this.offset = null;
  this.limit = null;
  if (args) {
    if (args.hash !== undefined && args.hash !== null) {
      this.hash = args.hash;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
API_PoolTransactionsGet_args.prototype = {};
API_PoolTransactionsGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hash = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_PoolTransactionsGet_args.prototype.write = function(output) {
  output.writeStructBegin('API_PoolTransactionsGet_args');
  if (this.hash !== null && this.hash !== undefined) {
    output.writeFieldBegin('hash', Thrift.Type.STRING, 1);
    output.writeBinary(this.hash);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 2);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 3);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_PoolTransactionsGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PoolTransactionsGetResult(args.success);
    }
  }
};
API_PoolTransactionsGet_result.prototype = {};
API_PoolTransactionsGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PoolTransactionsGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_PoolTransactionsGet_result.prototype.write = function(output) {
  output.writeStructBegin('API_PoolTransactionsGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_StatsGet_args = function(args) {
};
API_StatsGet_args.prototype = {};
API_StatsGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_StatsGet_args.prototype.write = function(output) {
  output.writeStructBegin('API_StatsGet_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_StatsGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.StatsGetResult(args.success);
    }
  }
};
API_StatsGet_result.prototype = {};
API_StatsGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.StatsGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_StatsGet_result.prototype.write = function(output) {
  output.writeStructBegin('API_StatsGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_SmartContractGet_args = function(args) {
  this.address = null;
  if (args) {
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
  }
};
API_SmartContractGet_args.prototype = {};
API_SmartContractGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_SmartContractGet_args.prototype.write = function(output) {
  output.writeStructBegin('API_SmartContractGet_args');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_SmartContractGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SmartContractGetResult(args.success);
    }
  }
};
API_SmartContractGet_result.prototype = {};
API_SmartContractGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SmartContractGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_SmartContractGet_result.prototype.write = function(output) {
  output.writeStructBegin('API_SmartContractGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_SmartContractsListGet_args = function(args) {
  this.deployer = null;
  if (args) {
    if (args.deployer !== undefined && args.deployer !== null) {
      this.deployer = args.deployer;
    }
  }
};
API_SmartContractsListGet_args.prototype = {};
API_SmartContractsListGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.deployer = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_SmartContractsListGet_args.prototype.write = function(output) {
  output.writeStructBegin('API_SmartContractsListGet_args');
  if (this.deployer !== null && this.deployer !== undefined) {
    output.writeFieldBegin('deployer', Thrift.Type.STRING, 1);
    output.writeBinary(this.deployer);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_SmartContractsListGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SmartContractsListGetResult(args.success);
    }
  }
};
API_SmartContractsListGet_result.prototype = {};
API_SmartContractsListGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SmartContractsListGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_SmartContractsListGet_result.prototype.write = function(output) {
  output.writeStructBegin('API_SmartContractsListGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_SmartContractAddressesListGet_args = function(args) {
  this.deployer = null;
  if (args) {
    if (args.deployer !== undefined && args.deployer !== null) {
      this.deployer = args.deployer;
    }
  }
};
API_SmartContractAddressesListGet_args.prototype = {};
API_SmartContractAddressesListGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.deployer = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_SmartContractAddressesListGet_args.prototype.write = function(output) {
  output.writeStructBegin('API_SmartContractAddressesListGet_args');
  if (this.deployer !== null && this.deployer !== undefined) {
    output.writeFieldBegin('deployer', Thrift.Type.STRING, 1);
    output.writeBinary(this.deployer);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_SmartContractAddressesListGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SmartContractAddressesListGetResult(args.success);
    }
  }
};
API_SmartContractAddressesListGet_result.prototype = {};
API_SmartContractAddressesListGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SmartContractAddressesListGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_SmartContractAddressesListGet_result.prototype.write = function(output) {
  output.writeStructBegin('API_SmartContractAddressesListGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_WaitForBlock_args = function(args) {
  this.obsolete = null;
  if (args) {
    if (args.obsolete !== undefined && args.obsolete !== null) {
      this.obsolete = args.obsolete;
    }
  }
};
API_WaitForBlock_args.prototype = {};
API_WaitForBlock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.obsolete = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_WaitForBlock_args.prototype.write = function(output) {
  output.writeStructBegin('API_WaitForBlock_args');
  if (this.obsolete !== null && this.obsolete !== undefined) {
    output.writeFieldBegin('obsolete', Thrift.Type.STRING, 1);
    output.writeBinary(this.obsolete);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_WaitForBlock_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
API_WaitForBlock_result.prototype = {};
API_WaitForBlock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_WaitForBlock_result.prototype.write = function(output) {
  output.writeStructBegin('API_WaitForBlock_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_WaitForSmartTransaction_args = function(args) {
  this.smart_address = null;
  if (args) {
    if (args.smart_address !== undefined && args.smart_address !== null) {
      this.smart_address = args.smart_address;
    }
  }
};
API_WaitForSmartTransaction_args.prototype = {};
API_WaitForSmartTransaction_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.smart_address = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_WaitForSmartTransaction_args.prototype.write = function(output) {
  output.writeStructBegin('API_WaitForSmartTransaction_args');
  if (this.smart_address !== null && this.smart_address !== undefined) {
    output.writeFieldBegin('smart_address', Thrift.Type.STRING, 1);
    output.writeBinary(this.smart_address);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_WaitForSmartTransaction_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TransactionId(args.success);
    }
  }
};
API_WaitForSmartTransaction_result.prototype = {};
API_WaitForSmartTransaction_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TransactionId();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_WaitForSmartTransaction_result.prototype.write = function(output) {
  output.writeStructBegin('API_WaitForSmartTransaction_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_SmartContractsAllListGet_args = function(args) {
  this.offset = null;
  this.limit = null;
  if (args) {
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
API_SmartContractsAllListGet_args.prototype = {};
API_SmartContractsAllListGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_SmartContractsAllListGet_args.prototype.write = function(output) {
  output.writeStructBegin('API_SmartContractsAllListGet_args');
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 1);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 2);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_SmartContractsAllListGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SmartContractsListGetResult(args.success);
    }
  }
};
API_SmartContractsAllListGet_result.prototype = {};
API_SmartContractsAllListGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SmartContractsListGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_SmartContractsAllListGet_result.prototype.write = function(output) {
  output.writeStructBegin('API_SmartContractsAllListGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_SmartMethodParamsGet_args = function(args) {
  this.address = null;
  this.id = null;
  if (args) {
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
API_SmartMethodParamsGet_args.prototype = {};
API_SmartMethodParamsGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_SmartMethodParamsGet_args.prototype.write = function(output) {
  output.writeStructBegin('API_SmartMethodParamsGet_args');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 2);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_SmartMethodParamsGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SmartMethodParamsGetResult(args.success);
    }
  }
};
API_SmartMethodParamsGet_result.prototype = {};
API_SmartMethodParamsGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SmartMethodParamsGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_SmartMethodParamsGet_result.prototype.write = function(output) {
  output.writeStructBegin('API_SmartMethodParamsGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_WalletsGet_args = function(args) {
  this.offset = null;
  this.limit = null;
  this.ordCol = null;
  this.desc = null;
  if (args) {
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
    if (args.ordCol !== undefined && args.ordCol !== null) {
      this.ordCol = args.ordCol;
    }
    if (args.desc !== undefined && args.desc !== null) {
      this.desc = args.desc;
    }
  }
};
API_WalletsGet_args.prototype = {};
API_WalletsGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.ordCol = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.desc = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_WalletsGet_args.prototype.write = function(output) {
  output.writeStructBegin('API_WalletsGet_args');
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 1);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 2);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  if (this.ordCol !== null && this.ordCol !== undefined) {
    output.writeFieldBegin('ordCol', Thrift.Type.BYTE, 3);
    output.writeByte(this.ordCol);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.BOOL, 4);
    output.writeBool(this.desc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_WalletsGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.WalletsGetResult(args.success);
    }
  }
};
API_WalletsGet_result.prototype = {};
API_WalletsGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.WalletsGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_WalletsGet_result.prototype.write = function(output) {
  output.writeStructBegin('API_WalletsGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_WritersGet_args = function(args) {
  this.page = null;
  if (args) {
    if (args.page !== undefined && args.page !== null) {
      this.page = args.page;
    }
  }
};
API_WritersGet_args.prototype = {};
API_WritersGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.page = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_WritersGet_args.prototype.write = function(output) {
  output.writeStructBegin('API_WritersGet_args');
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.I32, 1);
    output.writeI32(this.page);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_WritersGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.WritersGetResult(args.success);
    }
  }
};
API_WritersGet_result.prototype = {};
API_WritersGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.WritersGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_WritersGet_result.prototype.write = function(output) {
  output.writeStructBegin('API_WritersGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_TokenBalancesGet_args = function(args) {
  this.address = null;
  if (args) {
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
  }
};
API_TokenBalancesGet_args.prototype = {};
API_TokenBalancesGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_TokenBalancesGet_args.prototype.write = function(output) {
  output.writeStructBegin('API_TokenBalancesGet_args');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_TokenBalancesGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TokenBalancesResult(args.success);
    }
  }
};
API_TokenBalancesGet_result.prototype = {};
API_TokenBalancesGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TokenBalancesResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_TokenBalancesGet_result.prototype.write = function(output) {
  output.writeStructBegin('API_TokenBalancesGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_TokenTransfersGet_args = function(args) {
  this.token = null;
  this.offset = null;
  this.limit = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
API_TokenTransfersGet_args.prototype = {};
API_TokenTransfersGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_TokenTransfersGet_args.prototype.write = function(output) {
  output.writeStructBegin('API_TokenTransfersGet_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeBinary(this.token);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 2);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 3);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_TokenTransfersGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TokenTransfersResult(args.success);
    }
  }
};
API_TokenTransfersGet_result.prototype = {};
API_TokenTransfersGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TokenTransfersResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_TokenTransfersGet_result.prototype.write = function(output) {
  output.writeStructBegin('API_TokenTransfersGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_TokenTransfersListGet_args = function(args) {
  this.offset = null;
  this.limit = null;
  if (args) {
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
API_TokenTransfersListGet_args.prototype = {};
API_TokenTransfersListGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_TokenTransfersListGet_args.prototype.write = function(output) {
  output.writeStructBegin('API_TokenTransfersListGet_args');
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 1);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 2);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_TokenTransfersListGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TokenTransfersResult(args.success);
    }
  }
};
API_TokenTransfersListGet_result.prototype = {};
API_TokenTransfersListGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TokenTransfersResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_TokenTransfersListGet_result.prototype.write = function(output) {
  output.writeStructBegin('API_TokenTransfersListGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_TokenWalletTransfersGet_args = function(args) {
  this.token = null;
  this.address = null;
  this.offset = null;
  this.limit = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
API_TokenWalletTransfersGet_args.prototype = {};
API_TokenWalletTransfersGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_TokenWalletTransfersGet_args.prototype.write = function(output) {
  output.writeStructBegin('API_TokenWalletTransfersGet_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeBinary(this.token);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 2);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 3);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 4);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_TokenWalletTransfersGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TokenTransfersResult(args.success);
    }
  }
};
API_TokenWalletTransfersGet_result.prototype = {};
API_TokenWalletTransfersGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TokenTransfersResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_TokenWalletTransfersGet_result.prototype.write = function(output) {
  output.writeStructBegin('API_TokenWalletTransfersGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_TokenTransactionsGet_args = function(args) {
  this.token = null;
  this.offset = null;
  this.limit = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
API_TokenTransactionsGet_args.prototype = {};
API_TokenTransactionsGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_TokenTransactionsGet_args.prototype.write = function(output) {
  output.writeStructBegin('API_TokenTransactionsGet_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeBinary(this.token);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 2);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 3);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_TokenTransactionsGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TokenTransactionsResult(args.success);
    }
  }
};
API_TokenTransactionsGet_result.prototype = {};
API_TokenTransactionsGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TokenTransactionsResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_TokenTransactionsGet_result.prototype.write = function(output) {
  output.writeStructBegin('API_TokenTransactionsGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_TokenInfoGet_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};
API_TokenInfoGet_args.prototype = {};
API_TokenInfoGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_TokenInfoGet_args.prototype.write = function(output) {
  output.writeStructBegin('API_TokenInfoGet_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeBinary(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_TokenInfoGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TokenInfoResult(args.success);
    }
  }
};
API_TokenInfoGet_result.prototype = {};
API_TokenInfoGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TokenInfoResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_TokenInfoGet_result.prototype.write = function(output) {
  output.writeStructBegin('API_TokenInfoGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_TokenHoldersGet_args = function(args) {
  this.token = null;
  this.offset = null;
  this.limit = null;
  this.order = null;
  this.desc = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
    if (args.order !== undefined && args.order !== null) {
      this.order = args.order;
    }
    if (args.desc !== undefined && args.desc !== null) {
      this.desc = args.desc;
    }
  }
};
API_TokenHoldersGet_args.prototype = {};
API_TokenHoldersGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.order = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.desc = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_TokenHoldersGet_args.prototype.write = function(output) {
  output.writeStructBegin('API_TokenHoldersGet_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeBinary(this.token);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 2);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 3);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.I32, 4);
    output.writeI32(this.order);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.BOOL, 5);
    output.writeBool(this.desc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_TokenHoldersGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TokenHoldersResult(args.success);
    }
  }
};
API_TokenHoldersGet_result.prototype = {};
API_TokenHoldersGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TokenHoldersResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_TokenHoldersGet_result.prototype.write = function(output) {
  output.writeStructBegin('API_TokenHoldersGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_TokensListGet_args = function(args) {
  this.offset = null;
  this.limit = null;
  this.order = null;
  this.desc = null;
  if (args) {
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
    if (args.order !== undefined && args.order !== null) {
      this.order = args.order;
    }
    if (args.desc !== undefined && args.desc !== null) {
      this.desc = args.desc;
    }
  }
};
API_TokensListGet_args.prototype = {};
API_TokensListGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.order = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.desc = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_TokensListGet_args.prototype.write = function(output) {
  output.writeStructBegin('API_TokensListGet_args');
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 1);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 2);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.I32, 3);
    output.writeI32(this.order);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.BOOL, 4);
    output.writeBool(this.desc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_TokensListGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TokensListResult(args.success);
    }
  }
};
API_TokensListGet_result.prototype = {};
API_TokensListGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TokensListResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_TokensListGet_result.prototype.write = function(output) {
  output.writeStructBegin('API_TokensListGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_SmartContractDataGet_args = function(args) {
  this.address = null;
  if (args) {
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
  }
};
API_SmartContractDataGet_args.prototype = {};
API_SmartContractDataGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_SmartContractDataGet_args.prototype.write = function(output) {
  output.writeStructBegin('API_SmartContractDataGet_args');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_SmartContractDataGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SmartContractDataResult(args.success);
    }
  }
};
API_SmartContractDataGet_result.prototype = {};
API_SmartContractDataGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SmartContractDataResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_SmartContractDataGet_result.prototype.write = function(output) {
  output.writeStructBegin('API_SmartContractDataGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_SmartContractCompile_args = function(args) {
  this.sourceCode = null;
  if (args) {
    if (args.sourceCode !== undefined && args.sourceCode !== null) {
      this.sourceCode = args.sourceCode;
    }
  }
};
API_SmartContractCompile_args.prototype = {};
API_SmartContractCompile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sourceCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_SmartContractCompile_args.prototype.write = function(output) {
  output.writeStructBegin('API_SmartContractCompile_args');
  if (this.sourceCode !== null && this.sourceCode !== undefined) {
    output.writeFieldBegin('sourceCode', Thrift.Type.STRING, 1);
    output.writeString(this.sourceCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var API_SmartContractCompile_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SmartContractCompileResult(args.success);
    }
  }
};
API_SmartContractCompile_result.prototype = {};
API_SmartContractCompile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SmartContractCompileResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API_SmartContractCompile_result.prototype.write = function(output) {
  output.writeStructBegin('API_SmartContractCompile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var APIClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
APIClient.prototype = {};
APIClient.prototype.seqid = function() { return this._seqid; };
APIClient.prototype.new_seqid = function() { return this._seqid += 1; };

APIClient.prototype.BalanceGet = function(address, currency, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_BalanceGet(address, currency);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_BalanceGet(address, currency);
  }
};

APIClient.prototype.send_BalanceGet = function(address, currency) {
  var output = new this.pClass(this.output);
  var params = {
    address: address,
    currency: currency
  };
  var args = new API_BalanceGet_args(params);
  try {
    output.writeMessageBegin('BalanceGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_BalanceGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_BalanceGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('BalanceGet failed: unknown result');
};

APIClient.prototype.TransactionGet = function(transactionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_TransactionGet(transactionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_TransactionGet(transactionId);
  }
};

APIClient.prototype.send_TransactionGet = function(transactionId) {
  var output = new this.pClass(this.output);
  var params = {
    transactionId: transactionId
  };
  var args = new API_TransactionGet_args(params);
  try {
    output.writeMessageBegin('TransactionGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_TransactionGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_TransactionGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('TransactionGet failed: unknown result');
};

APIClient.prototype.TransactionsGet = function(address, offset, limit, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_TransactionsGet(address, offset, limit);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_TransactionsGet(address, offset, limit);
  }
};

APIClient.prototype.send_TransactionsGet = function(address, offset, limit) {
  var output = new this.pClass(this.output);
  var params = {
    address: address,
    offset: offset,
    limit: limit
  };
  var args = new API_TransactionsGet_args(params);
  try {
    output.writeMessageBegin('TransactionsGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_TransactionsGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_TransactionsGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('TransactionsGet failed: unknown result');
};

APIClient.prototype.TransactionFlow = function(transaction, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_TransactionFlow(transaction);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_TransactionFlow(transaction);
  }
};

APIClient.prototype.send_TransactionFlow = function(transaction) {
  var output = new this.pClass(this.output);
  var params = {
    transaction: transaction
  };
  var args = new API_TransactionFlow_args(params);
  try {
    output.writeMessageBegin('TransactionFlow', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_TransactionFlow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_TransactionFlow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('TransactionFlow failed: unknown result');
};

APIClient.prototype.TransactionsListGet = function(offset, limit, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_TransactionsListGet(offset, limit);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_TransactionsListGet(offset, limit);
  }
};

APIClient.prototype.send_TransactionsListGet = function(offset, limit) {
  var output = new this.pClass(this.output);
  var params = {
    offset: offset,
    limit: limit
  };
  var args = new API_TransactionsListGet_args(params);
  try {
    output.writeMessageBegin('TransactionsListGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_TransactionsListGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_TransactionsListGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('TransactionsListGet failed: unknown result');
};

APIClient.prototype.GetLastHash = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetLastHash();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetLastHash();
  }
};

APIClient.prototype.send_GetLastHash = function() {
  var output = new this.pClass(this.output);
  var args = new API_GetLastHash_args();
  try {
    output.writeMessageBegin('GetLastHash', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_GetLastHash = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_GetLastHash_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetLastHash failed: unknown result');
};

APIClient.prototype.PoolListGetStable = function(hash, limit, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_PoolListGetStable(hash, limit);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_PoolListGetStable(hash, limit);
  }
};

APIClient.prototype.send_PoolListGetStable = function(hash, limit) {
  var output = new this.pClass(this.output);
  var params = {
    hash: hash,
    limit: limit
  };
  var args = new API_PoolListGetStable_args(params);
  try {
    output.writeMessageBegin('PoolListGetStable', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_PoolListGetStable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_PoolListGetStable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('PoolListGetStable failed: unknown result');
};

APIClient.prototype.PoolListGet = function(offset, limit, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_PoolListGet(offset, limit);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_PoolListGet(offset, limit);
  }
};

APIClient.prototype.send_PoolListGet = function(offset, limit) {
  var output = new this.pClass(this.output);
  var params = {
    offset: offset,
    limit: limit
  };
  var args = new API_PoolListGet_args(params);
  try {
    output.writeMessageBegin('PoolListGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_PoolListGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_PoolListGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('PoolListGet failed: unknown result');
};

APIClient.prototype.PoolInfoGet = function(hash, index, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_PoolInfoGet(hash, index);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_PoolInfoGet(hash, index);
  }
};

APIClient.prototype.send_PoolInfoGet = function(hash, index) {
  var output = new this.pClass(this.output);
  var params = {
    hash: hash,
    index: index
  };
  var args = new API_PoolInfoGet_args(params);
  try {
    output.writeMessageBegin('PoolInfoGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_PoolInfoGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_PoolInfoGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('PoolInfoGet failed: unknown result');
};

APIClient.prototype.PoolTransactionsGet = function(hash, offset, limit, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_PoolTransactionsGet(hash, offset, limit);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_PoolTransactionsGet(hash, offset, limit);
  }
};

APIClient.prototype.send_PoolTransactionsGet = function(hash, offset, limit) {
  var output = new this.pClass(this.output);
  var params = {
    hash: hash,
    offset: offset,
    limit: limit
  };
  var args = new API_PoolTransactionsGet_args(params);
  try {
    output.writeMessageBegin('PoolTransactionsGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_PoolTransactionsGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_PoolTransactionsGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('PoolTransactionsGet failed: unknown result');
};

APIClient.prototype.StatsGet = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_StatsGet();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_StatsGet();
  }
};

APIClient.prototype.send_StatsGet = function() {
  var output = new this.pClass(this.output);
  var args = new API_StatsGet_args();
  try {
    output.writeMessageBegin('StatsGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_StatsGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_StatsGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('StatsGet failed: unknown result');
};

APIClient.prototype.SmartContractGet = function(address, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SmartContractGet(address);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SmartContractGet(address);
  }
};

APIClient.prototype.send_SmartContractGet = function(address) {
  var output = new this.pClass(this.output);
  var params = {
    address: address
  };
  var args = new API_SmartContractGet_args(params);
  try {
    output.writeMessageBegin('SmartContractGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_SmartContractGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_SmartContractGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('SmartContractGet failed: unknown result');
};

APIClient.prototype.SmartContractsListGet = function(deployer, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SmartContractsListGet(deployer);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SmartContractsListGet(deployer);
  }
};

APIClient.prototype.send_SmartContractsListGet = function(deployer) {
  var output = new this.pClass(this.output);
  var params = {
    deployer: deployer
  };
  var args = new API_SmartContractsListGet_args(params);
  try {
    output.writeMessageBegin('SmartContractsListGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_SmartContractsListGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_SmartContractsListGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('SmartContractsListGet failed: unknown result');
};

APIClient.prototype.SmartContractAddressesListGet = function(deployer, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SmartContractAddressesListGet(deployer);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SmartContractAddressesListGet(deployer);
  }
};

APIClient.prototype.send_SmartContractAddressesListGet = function(deployer) {
  var output = new this.pClass(this.output);
  var params = {
    deployer: deployer
  };
  var args = new API_SmartContractAddressesListGet_args(params);
  try {
    output.writeMessageBegin('SmartContractAddressesListGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_SmartContractAddressesListGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_SmartContractAddressesListGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('SmartContractAddressesListGet failed: unknown result');
};

APIClient.prototype.WaitForBlock = function(obsolete, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_WaitForBlock(obsolete);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_WaitForBlock(obsolete);
  }
};

APIClient.prototype.send_WaitForBlock = function(obsolete) {
  var output = new this.pClass(this.output);
  var params = {
    obsolete: obsolete
  };
  var args = new API_WaitForBlock_args(params);
  try {
    output.writeMessageBegin('WaitForBlock', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_WaitForBlock = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_WaitForBlock_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('WaitForBlock failed: unknown result');
};

APIClient.prototype.WaitForSmartTransaction = function(smart_address, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_WaitForSmartTransaction(smart_address);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_WaitForSmartTransaction(smart_address);
  }
};

APIClient.prototype.send_WaitForSmartTransaction = function(smart_address) {
  var output = new this.pClass(this.output);
  var params = {
    smart_address: smart_address
  };
  var args = new API_WaitForSmartTransaction_args(params);
  try {
    output.writeMessageBegin('WaitForSmartTransaction', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_WaitForSmartTransaction = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_WaitForSmartTransaction_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('WaitForSmartTransaction failed: unknown result');
};

APIClient.prototype.SmartContractsAllListGet = function(offset, limit, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SmartContractsAllListGet(offset, limit);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SmartContractsAllListGet(offset, limit);
  }
};

APIClient.prototype.send_SmartContractsAllListGet = function(offset, limit) {
  var output = new this.pClass(this.output);
  var params = {
    offset: offset,
    limit: limit
  };
  var args = new API_SmartContractsAllListGet_args(params);
  try {
    output.writeMessageBegin('SmartContractsAllListGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_SmartContractsAllListGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_SmartContractsAllListGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('SmartContractsAllListGet failed: unknown result');
};

APIClient.prototype.SmartMethodParamsGet = function(address, id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SmartMethodParamsGet(address, id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SmartMethodParamsGet(address, id);
  }
};

APIClient.prototype.send_SmartMethodParamsGet = function(address, id) {
  var output = new this.pClass(this.output);
  var params = {
    address: address,
    id: id
  };
  var args = new API_SmartMethodParamsGet_args(params);
  try {
    output.writeMessageBegin('SmartMethodParamsGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_SmartMethodParamsGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_SmartMethodParamsGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('SmartMethodParamsGet failed: unknown result');
};

APIClient.prototype.WalletsGet = function(offset, limit, ordCol, desc, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_WalletsGet(offset, limit, ordCol, desc);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_WalletsGet(offset, limit, ordCol, desc);
  }
};

APIClient.prototype.send_WalletsGet = function(offset, limit, ordCol, desc) {
  var output = new this.pClass(this.output);
  var params = {
    offset: offset,
    limit: limit,
    ordCol: ordCol,
    desc: desc
  };
  var args = new API_WalletsGet_args(params);
  try {
    output.writeMessageBegin('WalletsGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_WalletsGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_WalletsGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('WalletsGet failed: unknown result');
};

APIClient.prototype.WritersGet = function(page, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_WritersGet(page);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_WritersGet(page);
  }
};

APIClient.prototype.send_WritersGet = function(page) {
  var output = new this.pClass(this.output);
  var params = {
    page: page
  };
  var args = new API_WritersGet_args(params);
  try {
    output.writeMessageBegin('WritersGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_WritersGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_WritersGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('WritersGet failed: unknown result');
};

APIClient.prototype.TokenBalancesGet = function(address, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_TokenBalancesGet(address);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_TokenBalancesGet(address);
  }
};

APIClient.prototype.send_TokenBalancesGet = function(address) {
  var output = new this.pClass(this.output);
  var params = {
    address: address
  };
  var args = new API_TokenBalancesGet_args(params);
  try {
    output.writeMessageBegin('TokenBalancesGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_TokenBalancesGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_TokenBalancesGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('TokenBalancesGet failed: unknown result');
};

APIClient.prototype.TokenTransfersGet = function(token, offset, limit, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_TokenTransfersGet(token, offset, limit);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_TokenTransfersGet(token, offset, limit);
  }
};

APIClient.prototype.send_TokenTransfersGet = function(token, offset, limit) {
  var output = new this.pClass(this.output);
  var params = {
    token: token,
    offset: offset,
    limit: limit
  };
  var args = new API_TokenTransfersGet_args(params);
  try {
    output.writeMessageBegin('TokenTransfersGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_TokenTransfersGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_TokenTransfersGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('TokenTransfersGet failed: unknown result');
};

APIClient.prototype.TokenTransfersListGet = function(offset, limit, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_TokenTransfersListGet(offset, limit);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_TokenTransfersListGet(offset, limit);
  }
};

APIClient.prototype.send_TokenTransfersListGet = function(offset, limit) {
  var output = new this.pClass(this.output);
  var params = {
    offset: offset,
    limit: limit
  };
  var args = new API_TokenTransfersListGet_args(params);
  try {
    output.writeMessageBegin('TokenTransfersListGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_TokenTransfersListGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_TokenTransfersListGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('TokenTransfersListGet failed: unknown result');
};

APIClient.prototype.TokenWalletTransfersGet = function(token, address, offset, limit, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_TokenWalletTransfersGet(token, address, offset, limit);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_TokenWalletTransfersGet(token, address, offset, limit);
  }
};

APIClient.prototype.send_TokenWalletTransfersGet = function(token, address, offset, limit) {
  var output = new this.pClass(this.output);
  var params = {
    token: token,
    address: address,
    offset: offset,
    limit: limit
  };
  var args = new API_TokenWalletTransfersGet_args(params);
  try {
    output.writeMessageBegin('TokenWalletTransfersGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_TokenWalletTransfersGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_TokenWalletTransfersGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('TokenWalletTransfersGet failed: unknown result');
};

APIClient.prototype.TokenTransactionsGet = function(token, offset, limit, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_TokenTransactionsGet(token, offset, limit);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_TokenTransactionsGet(token, offset, limit);
  }
};

APIClient.prototype.send_TokenTransactionsGet = function(token, offset, limit) {
  var output = new this.pClass(this.output);
  var params = {
    token: token,
    offset: offset,
    limit: limit
  };
  var args = new API_TokenTransactionsGet_args(params);
  try {
    output.writeMessageBegin('TokenTransactionsGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_TokenTransactionsGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_TokenTransactionsGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('TokenTransactionsGet failed: unknown result');
};

APIClient.prototype.TokenInfoGet = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_TokenInfoGet(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_TokenInfoGet(token);
  }
};

APIClient.prototype.send_TokenInfoGet = function(token) {
  var output = new this.pClass(this.output);
  var params = {
    token: token
  };
  var args = new API_TokenInfoGet_args(params);
  try {
    output.writeMessageBegin('TokenInfoGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_TokenInfoGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_TokenInfoGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('TokenInfoGet failed: unknown result');
};

APIClient.prototype.TokenHoldersGet = function(token, offset, limit, order, desc, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_TokenHoldersGet(token, offset, limit, order, desc);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_TokenHoldersGet(token, offset, limit, order, desc);
  }
};

APIClient.prototype.send_TokenHoldersGet = function(token, offset, limit, order, desc) {
  var output = new this.pClass(this.output);
  var params = {
    token: token,
    offset: offset,
    limit: limit,
    order: order,
    desc: desc
  };
  var args = new API_TokenHoldersGet_args(params);
  try {
    output.writeMessageBegin('TokenHoldersGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_TokenHoldersGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_TokenHoldersGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('TokenHoldersGet failed: unknown result');
};

APIClient.prototype.TokensListGet = function(offset, limit, order, desc, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_TokensListGet(offset, limit, order, desc);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_TokensListGet(offset, limit, order, desc);
  }
};

APIClient.prototype.send_TokensListGet = function(offset, limit, order, desc) {
  var output = new this.pClass(this.output);
  var params = {
    offset: offset,
    limit: limit,
    order: order,
    desc: desc
  };
  var args = new API_TokensListGet_args(params);
  try {
    output.writeMessageBegin('TokensListGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_TokensListGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_TokensListGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('TokensListGet failed: unknown result');
};

APIClient.prototype.SmartContractDataGet = function(address, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SmartContractDataGet(address);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SmartContractDataGet(address);
  }
};

APIClient.prototype.send_SmartContractDataGet = function(address) {
  var output = new this.pClass(this.output);
  var params = {
    address: address
  };
  var args = new API_SmartContractDataGet_args(params);
  try {
    output.writeMessageBegin('SmartContractDataGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_SmartContractDataGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_SmartContractDataGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('SmartContractDataGet failed: unknown result');
};

APIClient.prototype.SmartContractCompile = function(sourceCode, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SmartContractCompile(sourceCode);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SmartContractCompile(sourceCode);
  }
};

APIClient.prototype.send_SmartContractCompile = function(sourceCode) {
  var output = new this.pClass(this.output);
  var params = {
    sourceCode: sourceCode
  };
  var args = new API_SmartContractCompile_args(params);
  try {
    output.writeMessageBegin('SmartContractCompile', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

APIClient.prototype.recv_SmartContractCompile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API_SmartContractCompile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('SmartContractCompile failed: unknown result');
};
var APIProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
APIProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
APIProcessor.prototype.process_BalanceGet = function(seqid, input, output) {
  var args = new API_BalanceGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.BalanceGet.length === 2) {
    Q.fcall(this._handler.BalanceGet.bind(this._handler),
      args.address,
      args.currency
    ).then(function(result) {
      var result_obj = new API_BalanceGet_result({success: result});
      output.writeMessageBegin("BalanceGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("BalanceGet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.BalanceGet(args.address, args.currency, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_BalanceGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("BalanceGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("BalanceGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_TransactionGet = function(seqid, input, output) {
  var args = new API_TransactionGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.TransactionGet.length === 1) {
    Q.fcall(this._handler.TransactionGet.bind(this._handler),
      args.transactionId
    ).then(function(result) {
      var result_obj = new API_TransactionGet_result({success: result});
      output.writeMessageBegin("TransactionGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("TransactionGet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.TransactionGet(args.transactionId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_TransactionGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("TransactionGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("TransactionGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_TransactionsGet = function(seqid, input, output) {
  var args = new API_TransactionsGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.TransactionsGet.length === 3) {
    Q.fcall(this._handler.TransactionsGet.bind(this._handler),
      args.address,
      args.offset,
      args.limit
    ).then(function(result) {
      var result_obj = new API_TransactionsGet_result({success: result});
      output.writeMessageBegin("TransactionsGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("TransactionsGet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.TransactionsGet(args.address, args.offset, args.limit, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_TransactionsGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("TransactionsGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("TransactionsGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_TransactionFlow = function(seqid, input, output) {
  var args = new API_TransactionFlow_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.TransactionFlow.length === 1) {
    Q.fcall(this._handler.TransactionFlow.bind(this._handler),
      args.transaction
    ).then(function(result) {
      var result_obj = new API_TransactionFlow_result({success: result});
      output.writeMessageBegin("TransactionFlow", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("TransactionFlow", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.TransactionFlow(args.transaction, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_TransactionFlow_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("TransactionFlow", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("TransactionFlow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_TransactionsListGet = function(seqid, input, output) {
  var args = new API_TransactionsListGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.TransactionsListGet.length === 2) {
    Q.fcall(this._handler.TransactionsListGet.bind(this._handler),
      args.offset,
      args.limit
    ).then(function(result) {
      var result_obj = new API_TransactionsListGet_result({success: result});
      output.writeMessageBegin("TransactionsListGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("TransactionsListGet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.TransactionsListGet(args.offset, args.limit, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_TransactionsListGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("TransactionsListGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("TransactionsListGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_GetLastHash = function(seqid, input, output) {
  var args = new API_GetLastHash_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetLastHash.length === 0) {
    Q.fcall(this._handler.GetLastHash.bind(this._handler)
    ).then(function(result) {
      var result_obj = new API_GetLastHash_result({success: result});
      output.writeMessageBegin("GetLastHash", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetLastHash", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetLastHash(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_GetLastHash_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetLastHash", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetLastHash", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_PoolListGetStable = function(seqid, input, output) {
  var args = new API_PoolListGetStable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.PoolListGetStable.length === 2) {
    Q.fcall(this._handler.PoolListGetStable.bind(this._handler),
      args.hash,
      args.limit
    ).then(function(result) {
      var result_obj = new API_PoolListGetStable_result({success: result});
      output.writeMessageBegin("PoolListGetStable", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("PoolListGetStable", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.PoolListGetStable(args.hash, args.limit, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_PoolListGetStable_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("PoolListGetStable", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("PoolListGetStable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_PoolListGet = function(seqid, input, output) {
  var args = new API_PoolListGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.PoolListGet.length === 2) {
    Q.fcall(this._handler.PoolListGet.bind(this._handler),
      args.offset,
      args.limit
    ).then(function(result) {
      var result_obj = new API_PoolListGet_result({success: result});
      output.writeMessageBegin("PoolListGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("PoolListGet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.PoolListGet(args.offset, args.limit, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_PoolListGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("PoolListGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("PoolListGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_PoolInfoGet = function(seqid, input, output) {
  var args = new API_PoolInfoGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.PoolInfoGet.length === 2) {
    Q.fcall(this._handler.PoolInfoGet.bind(this._handler),
      args.hash,
      args.index
    ).then(function(result) {
      var result_obj = new API_PoolInfoGet_result({success: result});
      output.writeMessageBegin("PoolInfoGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("PoolInfoGet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.PoolInfoGet(args.hash, args.index, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_PoolInfoGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("PoolInfoGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("PoolInfoGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_PoolTransactionsGet = function(seqid, input, output) {
  var args = new API_PoolTransactionsGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.PoolTransactionsGet.length === 3) {
    Q.fcall(this._handler.PoolTransactionsGet.bind(this._handler),
      args.hash,
      args.offset,
      args.limit
    ).then(function(result) {
      var result_obj = new API_PoolTransactionsGet_result({success: result});
      output.writeMessageBegin("PoolTransactionsGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("PoolTransactionsGet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.PoolTransactionsGet(args.hash, args.offset, args.limit, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_PoolTransactionsGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("PoolTransactionsGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("PoolTransactionsGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_StatsGet = function(seqid, input, output) {
  var args = new API_StatsGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.StatsGet.length === 0) {
    Q.fcall(this._handler.StatsGet.bind(this._handler)
    ).then(function(result) {
      var result_obj = new API_StatsGet_result({success: result});
      output.writeMessageBegin("StatsGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("StatsGet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.StatsGet(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_StatsGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("StatsGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("StatsGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_SmartContractGet = function(seqid, input, output) {
  var args = new API_SmartContractGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SmartContractGet.length === 1) {
    Q.fcall(this._handler.SmartContractGet.bind(this._handler),
      args.address
    ).then(function(result) {
      var result_obj = new API_SmartContractGet_result({success: result});
      output.writeMessageBegin("SmartContractGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("SmartContractGet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SmartContractGet(args.address, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_SmartContractGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SmartContractGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SmartContractGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_SmartContractsListGet = function(seqid, input, output) {
  var args = new API_SmartContractsListGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SmartContractsListGet.length === 1) {
    Q.fcall(this._handler.SmartContractsListGet.bind(this._handler),
      args.deployer
    ).then(function(result) {
      var result_obj = new API_SmartContractsListGet_result({success: result});
      output.writeMessageBegin("SmartContractsListGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("SmartContractsListGet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SmartContractsListGet(args.deployer, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_SmartContractsListGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SmartContractsListGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SmartContractsListGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_SmartContractAddressesListGet = function(seqid, input, output) {
  var args = new API_SmartContractAddressesListGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SmartContractAddressesListGet.length === 1) {
    Q.fcall(this._handler.SmartContractAddressesListGet.bind(this._handler),
      args.deployer
    ).then(function(result) {
      var result_obj = new API_SmartContractAddressesListGet_result({success: result});
      output.writeMessageBegin("SmartContractAddressesListGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("SmartContractAddressesListGet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SmartContractAddressesListGet(args.deployer, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_SmartContractAddressesListGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SmartContractAddressesListGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SmartContractAddressesListGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_WaitForBlock = function(seqid, input, output) {
  var args = new API_WaitForBlock_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.WaitForBlock.length === 1) {
    Q.fcall(this._handler.WaitForBlock.bind(this._handler),
      args.obsolete
    ).then(function(result) {
      var result_obj = new API_WaitForBlock_result({success: result});
      output.writeMessageBegin("WaitForBlock", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("WaitForBlock", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.WaitForBlock(args.obsolete, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_WaitForBlock_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("WaitForBlock", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("WaitForBlock", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_WaitForSmartTransaction = function(seqid, input, output) {
  var args = new API_WaitForSmartTransaction_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.WaitForSmartTransaction.length === 1) {
    Q.fcall(this._handler.WaitForSmartTransaction.bind(this._handler),
      args.smart_address
    ).then(function(result) {
      var result_obj = new API_WaitForSmartTransaction_result({success: result});
      output.writeMessageBegin("WaitForSmartTransaction", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("WaitForSmartTransaction", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.WaitForSmartTransaction(args.smart_address, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_WaitForSmartTransaction_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("WaitForSmartTransaction", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("WaitForSmartTransaction", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_SmartContractsAllListGet = function(seqid, input, output) {
  var args = new API_SmartContractsAllListGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SmartContractsAllListGet.length === 2) {
    Q.fcall(this._handler.SmartContractsAllListGet.bind(this._handler),
      args.offset,
      args.limit
    ).then(function(result) {
      var result_obj = new API_SmartContractsAllListGet_result({success: result});
      output.writeMessageBegin("SmartContractsAllListGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("SmartContractsAllListGet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SmartContractsAllListGet(args.offset, args.limit, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_SmartContractsAllListGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SmartContractsAllListGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SmartContractsAllListGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_SmartMethodParamsGet = function(seqid, input, output) {
  var args = new API_SmartMethodParamsGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SmartMethodParamsGet.length === 2) {
    Q.fcall(this._handler.SmartMethodParamsGet.bind(this._handler),
      args.address,
      args.id
    ).then(function(result) {
      var result_obj = new API_SmartMethodParamsGet_result({success: result});
      output.writeMessageBegin("SmartMethodParamsGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("SmartMethodParamsGet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SmartMethodParamsGet(args.address, args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_SmartMethodParamsGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SmartMethodParamsGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SmartMethodParamsGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_WalletsGet = function(seqid, input, output) {
  var args = new API_WalletsGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.WalletsGet.length === 4) {
    Q.fcall(this._handler.WalletsGet.bind(this._handler),
      args.offset,
      args.limit,
      args.ordCol,
      args.desc
    ).then(function(result) {
      var result_obj = new API_WalletsGet_result({success: result});
      output.writeMessageBegin("WalletsGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("WalletsGet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.WalletsGet(args.offset, args.limit, args.ordCol, args.desc, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_WalletsGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("WalletsGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("WalletsGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_WritersGet = function(seqid, input, output) {
  var args = new API_WritersGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.WritersGet.length === 1) {
    Q.fcall(this._handler.WritersGet.bind(this._handler),
      args.page
    ).then(function(result) {
      var result_obj = new API_WritersGet_result({success: result});
      output.writeMessageBegin("WritersGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("WritersGet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.WritersGet(args.page, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_WritersGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("WritersGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("WritersGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_TokenBalancesGet = function(seqid, input, output) {
  var args = new API_TokenBalancesGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.TokenBalancesGet.length === 1) {
    Q.fcall(this._handler.TokenBalancesGet.bind(this._handler),
      args.address
    ).then(function(result) {
      var result_obj = new API_TokenBalancesGet_result({success: result});
      output.writeMessageBegin("TokenBalancesGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("TokenBalancesGet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.TokenBalancesGet(args.address, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_TokenBalancesGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("TokenBalancesGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("TokenBalancesGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_TokenTransfersGet = function(seqid, input, output) {
  var args = new API_TokenTransfersGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.TokenTransfersGet.length === 3) {
    Q.fcall(this._handler.TokenTransfersGet.bind(this._handler),
      args.token,
      args.offset,
      args.limit
    ).then(function(result) {
      var result_obj = new API_TokenTransfersGet_result({success: result});
      output.writeMessageBegin("TokenTransfersGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("TokenTransfersGet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.TokenTransfersGet(args.token, args.offset, args.limit, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_TokenTransfersGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("TokenTransfersGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("TokenTransfersGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_TokenTransfersListGet = function(seqid, input, output) {
  var args = new API_TokenTransfersListGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.TokenTransfersListGet.length === 2) {
    Q.fcall(this._handler.TokenTransfersListGet.bind(this._handler),
      args.offset,
      args.limit
    ).then(function(result) {
      var result_obj = new API_TokenTransfersListGet_result({success: result});
      output.writeMessageBegin("TokenTransfersListGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("TokenTransfersListGet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.TokenTransfersListGet(args.offset, args.limit, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_TokenTransfersListGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("TokenTransfersListGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("TokenTransfersListGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_TokenWalletTransfersGet = function(seqid, input, output) {
  var args = new API_TokenWalletTransfersGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.TokenWalletTransfersGet.length === 4) {
    Q.fcall(this._handler.TokenWalletTransfersGet.bind(this._handler),
      args.token,
      args.address,
      args.offset,
      args.limit
    ).then(function(result) {
      var result_obj = new API_TokenWalletTransfersGet_result({success: result});
      output.writeMessageBegin("TokenWalletTransfersGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("TokenWalletTransfersGet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.TokenWalletTransfersGet(args.token, args.address, args.offset, args.limit, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_TokenWalletTransfersGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("TokenWalletTransfersGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("TokenWalletTransfersGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_TokenTransactionsGet = function(seqid, input, output) {
  var args = new API_TokenTransactionsGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.TokenTransactionsGet.length === 3) {
    Q.fcall(this._handler.TokenTransactionsGet.bind(this._handler),
      args.token,
      args.offset,
      args.limit
    ).then(function(result) {
      var result_obj = new API_TokenTransactionsGet_result({success: result});
      output.writeMessageBegin("TokenTransactionsGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("TokenTransactionsGet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.TokenTransactionsGet(args.token, args.offset, args.limit, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_TokenTransactionsGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("TokenTransactionsGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("TokenTransactionsGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_TokenInfoGet = function(seqid, input, output) {
  var args = new API_TokenInfoGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.TokenInfoGet.length === 1) {
    Q.fcall(this._handler.TokenInfoGet.bind(this._handler),
      args.token
    ).then(function(result) {
      var result_obj = new API_TokenInfoGet_result({success: result});
      output.writeMessageBegin("TokenInfoGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("TokenInfoGet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.TokenInfoGet(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_TokenInfoGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("TokenInfoGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("TokenInfoGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_TokenHoldersGet = function(seqid, input, output) {
  var args = new API_TokenHoldersGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.TokenHoldersGet.length === 5) {
    Q.fcall(this._handler.TokenHoldersGet.bind(this._handler),
      args.token,
      args.offset,
      args.limit,
      args.order,
      args.desc
    ).then(function(result) {
      var result_obj = new API_TokenHoldersGet_result({success: result});
      output.writeMessageBegin("TokenHoldersGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("TokenHoldersGet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.TokenHoldersGet(args.token, args.offset, args.limit, args.order, args.desc, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_TokenHoldersGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("TokenHoldersGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("TokenHoldersGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_TokensListGet = function(seqid, input, output) {
  var args = new API_TokensListGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.TokensListGet.length === 4) {
    Q.fcall(this._handler.TokensListGet.bind(this._handler),
      args.offset,
      args.limit,
      args.order,
      args.desc
    ).then(function(result) {
      var result_obj = new API_TokensListGet_result({success: result});
      output.writeMessageBegin("TokensListGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("TokensListGet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.TokensListGet(args.offset, args.limit, args.order, args.desc, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_TokensListGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("TokensListGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("TokensListGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_SmartContractDataGet = function(seqid, input, output) {
  var args = new API_SmartContractDataGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SmartContractDataGet.length === 1) {
    Q.fcall(this._handler.SmartContractDataGet.bind(this._handler),
      args.address
    ).then(function(result) {
      var result_obj = new API_SmartContractDataGet_result({success: result});
      output.writeMessageBegin("SmartContractDataGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("SmartContractDataGet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SmartContractDataGet(args.address, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_SmartContractDataGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SmartContractDataGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SmartContractDataGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIProcessor.prototype.process_SmartContractCompile = function(seqid, input, output) {
  var args = new API_SmartContractCompile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SmartContractCompile.length === 1) {
    Q.fcall(this._handler.SmartContractCompile.bind(this._handler),
      args.sourceCode
    ).then(function(result) {
      var result_obj = new API_SmartContractCompile_result({success: result});
      output.writeMessageBegin("SmartContractCompile", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("SmartContractCompile", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SmartContractCompile(args.sourceCode, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new API_SmartContractCompile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SmartContractCompile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SmartContractCompile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
